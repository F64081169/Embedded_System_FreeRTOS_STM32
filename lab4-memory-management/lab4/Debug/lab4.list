
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046fc  080046fc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000015e8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001660  20001660  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001315d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026de  00000000  00000000  00033205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  000358e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db0  00000000  00000000  00036780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c88  00000000  00000000  00037530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011178  00000000  00000000  000591b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f58  00000000  00000000  0006a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013c288  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004084  00000000  00000000  0013c2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004564 	.word	0x08004564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004564 	.word	0x08004564

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <red_LED_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void red_LED_task(void *pvParameters)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <red_LED_task+0x1c>)
 8000586:	f000 fee0 	bl	800134a <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 800058a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058e:	f002 fc0b 	bl	8002da8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000592:	e7f5      	b.n	8000580 <red_LED_task+0x8>
 8000594:	40020c00 	.word	0x40020c00

08000598 <green_LED_task>:
	}
}

void green_LED_task(void *pvParameters)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <green_LED_task+0x1c>)
 80005a6:	f000 fed0 	bl	800134a <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f002 fbfb 	bl	8002da8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005b2:	e7f5      	b.n	80005a0 <green_LED_task+0x8>
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <task1>:
	}
}

void task1(void *pvParameters)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    while (1) {
    	vTaskDelay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f002 fbf0 	bl	8002da8 <vTaskDelay>
        vTaskDelete(NULL);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f002 fb5d 	bl	8002c88 <vTaskDelete>
    	vTaskDelay(1000);
 80005ce:	e7f7      	b.n	80005c0 <task1+0x8>

080005d0 <task2>:
    }
}

void task2(void *pvParameters)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005d8:	2000      	movs	r0, #0
 80005da:	f002 fb55 	bl	8002c88 <vTaskDelete>
 80005de:	e7fb      	b.n	80005d8 <task2+0x8>

080005e0 <task3>:
    }
}

void task3(void *pvParameters)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f002 fb4d 	bl	8002c88 <vTaskDelete>
 80005ee:	e7fb      	b.n	80005e8 <task3+0x8>

080005f0 <print_task>:
    }
}

void print_task(void *pvParameters)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    while (1) {
		vPrintFreeList();
 80005f8:	f003 fae4 	bl	8003bc4 <vPrintFreeList>
		vTaskDelay(3000);
 80005fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000600:	f002 fbd2 	bl	8002da8 <vTaskDelay>
		vPrintFreeList();
 8000604:	e7f8      	b.n	80005f8 <print_task+0x8>
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fbc3 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f85b 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8ed 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f8c1 	bl	80007a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(red_LED_task, "RED_LED", 100, NULL, 0, NULL);
 800061e:	2300      	movs	r3, #0
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2300      	movs	r3, #0
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	2264      	movs	r2, #100	; 0x64
 800062a:	491c      	ldr	r1, [pc, #112]	; (800069c <main+0x94>)
 800062c:	481c      	ldr	r0, [pc, #112]	; (80006a0 <main+0x98>)
 800062e:	f002 f9c5 	bl	80029bc <xTaskCreate>
  xTaskCreate(task1, "TASK1", 50, NULL, 0, NULL);
 8000632:	2300      	movs	r3, #0
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2300      	movs	r3, #0
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	2232      	movs	r2, #50	; 0x32
 800063e:	4919      	ldr	r1, [pc, #100]	; (80006a4 <main+0x9c>)
 8000640:	4819      	ldr	r0, [pc, #100]	; (80006a8 <main+0xa0>)
 8000642:	f002 f9bb 	bl	80029bc <xTaskCreate>
  xTaskCreate(task2, "TASK2", 30, NULL, 0, NULL);
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2300      	movs	r3, #0
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	221e      	movs	r2, #30
 8000652:	4916      	ldr	r1, [pc, #88]	; (80006ac <main+0xa4>)
 8000654:	4816      	ldr	r0, [pc, #88]	; (80006b0 <main+0xa8>)
 8000656:	f002 f9b1 	bl	80029bc <xTaskCreate>
  xTaskCreate(green_LED_task, "GREEN_LED", 130, NULL, 0, NULL);
 800065a:	2300      	movs	r3, #0
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2300      	movs	r3, #0
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2282      	movs	r2, #130	; 0x82
 8000666:	4913      	ldr	r1, [pc, #76]	; (80006b4 <main+0xac>)
 8000668:	4813      	ldr	r0, [pc, #76]	; (80006b8 <main+0xb0>)
 800066a:	f002 f9a7 	bl	80029bc <xTaskCreate>
  xTaskCreate(task3, "TASK3", 40, NULL, 0, NULL);
 800066e:	2300      	movs	r3, #0
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2300      	movs	r3, #0
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	2228      	movs	r2, #40	; 0x28
 800067a:	4910      	ldr	r1, [pc, #64]	; (80006bc <main+0xb4>)
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0xb8>)
 800067e:	f002 f99d 	bl	80029bc <xTaskCreate>
  xTaskCreate(print_task, "PRINT", 130, NULL, 0, NULL);
 8000682:	2300      	movs	r3, #0
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2300      	movs	r3, #0
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2300      	movs	r3, #0
 800068c:	2282      	movs	r2, #130	; 0x82
 800068e:	490d      	ldr	r1, [pc, #52]	; (80006c4 <main+0xbc>)
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <main+0xc0>)
 8000692:	f002 f993 	bl	80029bc <xTaskCreate>
  vTaskStartScheduler();
 8000696:	f002 fbbb 	bl	8002e10 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	e7fe      	b.n	800069a <main+0x92>
 800069c:	0800457c 	.word	0x0800457c
 80006a0:	08000579 	.word	0x08000579
 80006a4:	08004584 	.word	0x08004584
 80006a8:	080005b9 	.word	0x080005b9
 80006ac:	0800458c 	.word	0x0800458c
 80006b0:	080005d1 	.word	0x080005d1
 80006b4:	08004594 	.word	0x08004594
 80006b8:	08000599 	.word	0x08000599
 80006bc:	080045a0 	.word	0x080045a0
 80006c0:	080005e1 	.word	0x080005e1
 80006c4:	080045a8 	.word	0x080045a8
 80006c8:	080005f1 	.word	0x080005f1

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fb12 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a27      	ldr	r2, [pc, #156]	; (8000798 <SystemClock_Config+0xcc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd0>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000740:	2332      	movs	r3, #50	; 0x32
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000744:	2304      	movs	r3, #4
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fe15 	bl	8001380 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800075c:	f000 f9ba 	bl	8000ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f876 	bl	8001870 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800078a:	f000 f9a3 	bl	8000ad4 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f001 fd26 	bl	8002228 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f977 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200015c0 	.word	0x200015c0
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4ba2      	ldr	r3, [pc, #648]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4aa1      	ldr	r2, [pc, #644]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b9f      	ldr	r3, [pc, #636]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	4b9b      	ldr	r3, [pc, #620]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a9a      	ldr	r2, [pc, #616]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b98      	ldr	r3, [pc, #608]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b94      	ldr	r3, [pc, #592]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a93      	ldr	r2, [pc, #588]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b91      	ldr	r3, [pc, #580]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b8d      	ldr	r3, [pc, #564]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a8c      	ldr	r2, [pc, #560]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b8a      	ldr	r3, [pc, #552]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b86      	ldr	r3, [pc, #536]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a85      	ldr	r2, [pc, #532]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b83      	ldr	r3, [pc, #524]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b7f      	ldr	r3, [pc, #508]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a7e      	ldr	r2, [pc, #504]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b7c      	ldr	r3, [pc, #496]	; (8000a98 <MX_GPIO_Init+0x2a4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	4879      	ldr	r0, [pc, #484]	; (8000a9c <MX_GPIO_Init+0x2a8>)
 80008b8:	f000 fd2e 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2101      	movs	r1, #1
 80008c0:	4877      	ldr	r0, [pc, #476]	; (8000aa0 <MX_GPIO_Init+0x2ac>)
 80008c2:	f000 fd29 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	2200      	movs	r2, #0
 80008c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008cc:	4875      	ldr	r0, [pc, #468]	; (8000aa4 <MX_GPIO_Init+0x2b0>)
 80008ce:	f000 fd23 	bl	8001318 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	486c      	ldr	r0, [pc, #432]	; (8000a9c <MX_GPIO_Init+0x2a8>)
 80008ea:	f000 fb79 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4866      	ldr	r0, [pc, #408]	; (8000aa0 <MX_GPIO_Init+0x2ac>)
 8000906:	f000 fb6b 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091a:	2305      	movs	r3, #5
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	485e      	ldr	r0, [pc, #376]	; (8000aa0 <MX_GPIO_Init+0x2ac>)
 8000926:	f000 fb5b 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	485a      	ldr	r0, [pc, #360]	; (8000aa8 <MX_GPIO_Init+0x2b4>)
 8000940:	f000 fb4e 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000944:	2310      	movs	r3, #16
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000954:	2306      	movs	r3, #6
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4852      	ldr	r0, [pc, #328]	; (8000aa8 <MX_GPIO_Init+0x2b4>)
 8000960:	f000 fb3e 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000964:	23e0      	movs	r3, #224	; 0xe0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000974:	2305      	movs	r3, #5
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	484a      	ldr	r0, [pc, #296]	; (8000aa8 <MX_GPIO_Init+0x2b4>)
 8000980:	f000 fb2e 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000984:	2304      	movs	r3, #4
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4845      	ldr	r0, [pc, #276]	; (8000aac <MX_GPIO_Init+0x2b8>)
 8000998:	f000 fb22 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	483c      	ldr	r0, [pc, #240]	; (8000aac <MX_GPIO_Init+0x2b8>)
 80009ba:	f000 fb11 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009be:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <MX_GPIO_Init+0x2b0>)
 80009d8:	f000 fb02 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009dc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ee:	2306      	movs	r3, #6
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4829      	ldr	r0, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0x2ac>)
 80009fa:	f000 faf1 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <MX_GPIO_Init+0x2b4>)
 8000a14:	f000 fae4 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	481c      	ldr	r0, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0x2b4>)
 8000a36:	f000 fad3 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <MX_GPIO_Init+0x2b0>)
 8000a4e:	f000 fac7 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a52:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a64:	2304      	movs	r3, #4
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_GPIO_Init+0x2b8>)
 8000a70:	f000 fab6 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a78:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_GPIO_Init+0x2a8>)
 8000a8a:	f000 faa9 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000a8e:	bf00      	nop
 8000a90:	3730      	adds	r7, #48	; 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac2:	f000 f98b 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40001400 	.word	0x40001400

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_UART_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_UART_MspInit+0x8c>)
 8000ba6:	f000 fa1b 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	; 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	2037      	movs	r0, #55	; 0x37
 8000bd6:	f000 f9d9 	bl	8000f8c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bda:	2037      	movs	r0, #55	; 0x37
 8000bdc:	f000 f9f2 	bl	8000fc4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_InitTick+0xa4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_InitTick+0xa4>)
 8000bea:	f043 0320 	orr.w	r3, r3, #32
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xa4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfc:	f107 0210 	add.w	r2, r7, #16
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 f82e 	bl	8001c68 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c0c:	f001 f804 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8000c10:	4603      	mov	r3, r0
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_InitTick+0xa8>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9b      	lsrs	r3, r3, #18
 8000c20:	3b01      	subs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_InitTick+0xac>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_InitTick+0xb0>)
 8000c28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_InitTick+0xac>)
 8000c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c30:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_InitTick+0xac>)
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_InitTick+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_InitTick+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_InitTick+0xac>)
 8000c46:	f001 f841 	bl	8001ccc <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d104      	bne.n	8000c5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <HAL_InitTick+0xac>)
 8000c52:	f001 f895 	bl	8001d80 <HAL_TIM_Base_Start_IT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3730      	adds	r7, #48	; 0x30
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	431bde83 	.word	0x431bde83
 8000c6c:	20001604 	.word	0x20001604
 8000c70:	40001400 	.word	0x40001400

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <TIM7_IRQHandler+0x10>)
 8000ca6:	f001 f8db 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20001604 	.word	0x20001604

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f002 ffd6 	bl	8003c94 <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20020000 	.word	0x20020000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	20000094 	.word	0x20000094
 8000d1c:	20001660 	.word	0x20001660

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ffd7 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f002 ff95 	bl	8003ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fc47 	bl	8000608 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d88:	08004704 	.word	0x08004704
  ldr r2, =_sbss
 8000d8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d90:	20001660 	.word	0x20001660

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f8d8 	bl	8000f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fefa 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe88 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	2000164c 	.word	0x2000164c

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000164c 	.word	0x2000164c

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff4c 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9e:	f7ff ff61 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff ffb1 	bl	8000f10 <NVIC_EncodePriority>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff80 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff54 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	e16b      	b.n	80012d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 815a 	bne.w	80012ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	2b02      	cmp	r3, #2
 8001030:	d130      	bne.n	8001094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	69b9      	ldr	r1, [r7, #24]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80b4 	beq.w	80012ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b60      	ldr	r3, [pc, #384]	; (80012ec <HAL_GPIO_Init+0x30c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a5f      	ldr	r2, [pc, #380]	; (80012ec <HAL_GPIO_Init+0x30c>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_GPIO_Init+0x30c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001182:	4a5b      	ldr	r2, [pc, #364]	; (80012f0 <HAL_GPIO_Init+0x310>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_GPIO_Init+0x314>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d02b      	beq.n	8001206 <HAL_GPIO_Init+0x226>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a51      	ldr	r2, [pc, #324]	; (80012f8 <HAL_GPIO_Init+0x318>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d025      	beq.n	8001202 <HAL_GPIO_Init+0x222>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_GPIO_Init+0x31c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x21e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_GPIO_Init+0x320>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x21a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <HAL_GPIO_Init+0x324>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x216>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_GPIO_Init+0x328>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x212>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4c      	ldr	r2, [pc, #304]	; (800130c <HAL_GPIO_Init+0x32c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x20e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4b      	ldr	r2, [pc, #300]	; (8001310 <HAL_GPIO_Init+0x330>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x20a>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e00e      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011ea:	2308      	movs	r3, #8
 80011ec:	e00c      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011ee:	2306      	movs	r3, #6
 80011f0:	e00a      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x228>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x228>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x310>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_GPIO_Init+0x334>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124a:	4a32      	ldr	r2, [pc, #200]	; (8001314 <HAL_GPIO_Init+0x334>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <HAL_GPIO_Init+0x334>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001274:	4a27      	ldr	r2, [pc, #156]	; (8001314 <HAL_GPIO_Init+0x334>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <HAL_GPIO_Init+0x334>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129e:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_GPIO_Init+0x334>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_GPIO_Init+0x334>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c8:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_GPIO_Init+0x334>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f ae90 	bls.w	8000ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800
 8001310:	40021c00 	.word	0x40021c00
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001334:	e003      	b.n	800133e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	619a      	str	r2, [r3, #24]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135c:	887a      	ldrh	r2, [r7, #2]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43d9      	mvns	r1, r3
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	400b      	ands	r3, r1
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e264      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	4ba3      	ldr	r3, [pc, #652]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d00c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4ba0      	ldr	r3, [pc, #640]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b9d      	ldr	r3, [pc, #628]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4b99      	ldr	r3, [pc, #612]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05b      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d157      	bne.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e23f      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x74>
 80013e6:	4b91      	ldr	r3, [pc, #580]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a90      	ldr	r2, [pc, #576]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b8b      	ldr	r3, [pc, #556]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a8a      	ldr	r2, [pc, #552]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a87      	ldr	r2, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 8001418:	4b84      	ldr	r3, [pc, #528]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a83      	ldr	r2, [pc, #524]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b81      	ldr	r3, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a80      	ldr	r2, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fce4 	bl	8000e04 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fce0 	bl	8000e04 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e204      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xc0>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fcd0 	bl	8000e04 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fccc 	bl	8000e04 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1f0      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b62      	ldr	r3, [pc, #392]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1c4      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4952      	ldr	r1, [pc, #328]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <HAL_RCC_OscConfig+0x2b0>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc85 	bl	8000e04 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc81 	bl	8000e04 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1a5      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4940      	ldr	r1, [pc, #256]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <HAL_RCC_OscConfig+0x2b0>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fc64 	bl	8000e04 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fc60 	bl	8000e04 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e184      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d030      	beq.n	80015cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d016      	beq.n	80015a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_RCC_OscConfig+0x2b4>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fc44 	bl	8000e04 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fc40 	bl	8000e04 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e164      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x200>
 800159e:	e015      	b.n	80015cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x2b4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fc2d 	bl	8000e04 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fc29 	bl	8000e04 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e14d      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a0 	beq.w	800171a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_OscConfig+0x2b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d121      	bne.n	800165a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_RCC_OscConfig+0x2b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_RCC_OscConfig+0x2b8>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fbef 	bl	8000e04 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e011      	b.n	800164e <HAL_RCC_OscConfig+0x2ce>
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	42470000 	.word	0x42470000
 8001634:	42470e80 	.word	0x42470e80
 8001638:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7ff fbe2 	bl	8000e04 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e106      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b85      	ldr	r3, [pc, #532]	; (8001864 <HAL_RCC_OscConfig+0x4e4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <HAL_RCC_OscConfig+0x2f0>
 8001662:	4b81      	ldr	r3, [pc, #516]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a80      	ldr	r2, [pc, #512]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	e01c      	b.n	80016aa <HAL_RCC_OscConfig+0x32a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x312>
 8001678:	4b7b      	ldr	r3, [pc, #492]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	4b78      	ldr	r3, [pc, #480]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a77      	ldr	r2, [pc, #476]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0x32a>
 8001692:	4b75      	ldr	r3, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	4a74      	ldr	r2, [pc, #464]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6713      	str	r3, [r2, #112]	; 0x70
 800169e:	4b72      	ldr	r3, [pc, #456]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a71      	ldr	r2, [pc, #452]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d015      	beq.n	80016de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fba7 	bl	8000e04 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff fba3 	bl	8000e04 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0c5      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	4b65      	ldr	r3, [pc, #404]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ee      	beq.n	80016ba <HAL_RCC_OscConfig+0x33a>
 80016dc:	e014      	b.n	8001708 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fb91 	bl	8000e04 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fb8d 	bl	8000e04 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0af      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ee      	bne.n	80016e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a55      	ldr	r2, [pc, #340]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 809b 	beq.w	800185a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d05c      	beq.n	80017ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d141      	bne.n	80017bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fb61 	bl	8000e04 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff fb5d 	bl	8000e04 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e081      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	019b      	lsls	r3, r3, #6
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	3b01      	subs	r3, #1
 800177e:	041b      	lsls	r3, r3, #16
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	061b      	lsls	r3, r3, #24
 8001788:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fb36 	bl	8000e04 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fb32 	bl	8000e04 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e056      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x41c>
 80017ba:	e04e      	b.n	800185a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_OscConfig+0x4ec>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fb1f 	bl	8000e04 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fb1b 	bl	8000e04 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e03f      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x44a>
 80017e8:	e037      	b.n	800185a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e032      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_RCC_OscConfig+0x4e8>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d028      	beq.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d121      	bne.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d11a      	bne.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001826:	4013      	ands	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800182c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800182e:	4293      	cmp	r3, r2
 8001830:	d111      	bne.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40007000 	.word	0x40007000
 8001868:	40023800 	.word	0x40023800
 800186c:	42470060 	.word	0x42470060

08001870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0cc      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d90c      	bls.n	80018ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d044      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d119      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	2b03      	cmp	r3, #3
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e067      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4934      	ldr	r1, [pc, #208]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fa50 	bl	8000e04 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff fa4c 	bl	8000e04 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d20c      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f821 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f8d2 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	080046a8 	.word	0x080046a8
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a54:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d00d      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	f200 80bd 	bhi.w	8001be0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a6e:	e0b7      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a72:	60bb      	str	r3, [r7, #8]
       break;
 8001a74:	e0b7      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a78:	60bb      	str	r3, [r7, #8]
      break;
 8001a7a:	e0b4      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a7c:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a86:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d04d      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b58      	ldr	r3, [pc, #352]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	ea02 0800 	and.w	r8, r2, r0
 8001aaa:	ea03 0901 	and.w	r9, r3, r1
 8001aae:	4640      	mov	r0, r8
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	014b      	lsls	r3, r1, #5
 8001abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ac0:	0142      	lsls	r2, r0, #5
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	ebb0 0008 	subs.w	r0, r0, r8
 8001aca:	eb61 0109 	sbc.w	r1, r1, r9
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	018b      	lsls	r3, r1, #6
 8001ad8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001adc:	0182      	lsls	r2, r0, #6
 8001ade:	1a12      	subs	r2, r2, r0
 8001ae0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ae4:	f04f 0000 	mov.w	r0, #0
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	00d9      	lsls	r1, r3, #3
 8001aee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001af2:	00d0      	lsls	r0, r2, #3
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	eb12 0208 	adds.w	r2, r2, r8
 8001afc:	eb43 0309 	adc.w	r3, r3, r9
 8001b00:	f04f 0000 	mov.w	r0, #0
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	0259      	lsls	r1, r3, #9
 8001b0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b0e:	0250      	lsls	r0, r2, #9
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	f7fe fbae 	bl	8000280 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e04a      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	461a      	mov	r2, r3
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	ea02 0400 	and.w	r4, r2, r0
 8001b46:	ea03 0501 	and.w	r5, r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	014b      	lsls	r3, r1, #5
 8001b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b5c:	0142      	lsls	r2, r0, #5
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	1b00      	subs	r0, r0, r4
 8001b64:	eb61 0105 	sbc.w	r1, r1, r5
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	018b      	lsls	r3, r1, #6
 8001b72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b76:	0182      	lsls	r2, r0, #6
 8001b78:	1a12      	subs	r2, r2, r0
 8001b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7e:	f04f 0000 	mov.w	r0, #0
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	00d9      	lsls	r1, r3, #3
 8001b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b8c:	00d0      	lsls	r0, r2, #3
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	1912      	adds	r2, r2, r4
 8001b94:	eb45 0303 	adc.w	r3, r5, r3
 8001b98:	f04f 0000 	mov.w	r0, #0
 8001b9c:	f04f 0100 	mov.w	r1, #0
 8001ba0:	0299      	lsls	r1, r3, #10
 8001ba2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ba6:	0290      	lsls	r0, r2, #10
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	f7fe fb62 	bl	8000280 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	60bb      	str	r3, [r7, #8]
      break;
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001be2:	60bb      	str	r3, [r7, #8]
      break;
 8001be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be6:	68bb      	ldr	r3, [r7, #8]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	007a1200 	.word	0x007a1200

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a9b      	lsrs	r3, r3, #10
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	080046b8 	.word	0x080046b8

08001c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c44:	f7ff ffdc 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0b5b      	lsrs	r3, r3, #13
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	080046b8 	.word	0x080046b8

08001c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	220f      	movs	r2, #15
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_RCC_GetClockConfig+0x60>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0207 	and.w	r2, r3, #7
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e041      	b.n	8001d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f839 	bl	8001d6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f000 f9d8 	bl	80020c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d001      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e04e      	b.n	8001e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc2:	d01d      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d010      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	40010400 	.word	0x40010400
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	40001800 	.word	0x40001800

08001e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0202 	mvn.w	r2, #2
 8001e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8ee 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8e0 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8f1 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8c4 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8b6 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8c7 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0208 	mvn.w	r2, #8
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f89a 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f88c 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f89d 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0210 	mvn.w	r2, #16
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f870 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f862 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f873 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0201 	mvn.w	r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fd66 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b80      	cmp	r3, #128	; 0x80
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f902 	bl	8002214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f838 	bl	80020ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b20      	cmp	r3, #32
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0220 	mvn.w	r2, #32
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8cc 	bl	8002200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a40      	ldr	r2, [pc, #256]	; (80021d4 <TIM_Base_SetConfig+0x114>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020de:	d00f      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <TIM_Base_SetConfig+0x118>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00b      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3c      	ldr	r2, [pc, #240]	; (80021dc <TIM_Base_SetConfig+0x11c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <TIM_Base_SetConfig+0x120>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d003      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <TIM_Base_SetConfig+0x124>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d108      	bne.n	8002112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <TIM_Base_SetConfig+0x114>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d027      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2c      	ldr	r2, [pc, #176]	; (80021d8 <TIM_Base_SetConfig+0x118>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d023      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <TIM_Base_SetConfig+0x11c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01f      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <TIM_Base_SetConfig+0x120>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <TIM_Base_SetConfig+0x124>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d017      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <TIM_Base_SetConfig+0x128>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <TIM_Base_SetConfig+0x12c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00f      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <TIM_Base_SetConfig+0x130>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <TIM_Base_SetConfig+0x134>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <TIM_Base_SetConfig+0x138>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d003      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a23      	ldr	r2, [pc, #140]	; (80021fc <TIM_Base_SetConfig+0x13c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d108      	bne.n	8002184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <TIM_Base_SetConfig+0x114>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0xf8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <TIM_Base_SetConfig+0x124>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d103      	bne.n	80021c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	615a      	str	r2, [r3, #20]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40010400 	.word	0x40010400
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40014400 	.word	0x40014400
 80021f0:	40014800 	.word	0x40014800
 80021f4:	40001800 	.word	0x40001800
 80021f8:	40001c00 	.word	0x40001c00
 80021fc:	40002000 	.word	0x40002000

08002200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e03f      	b.n	80022ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fc6e 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2224      	movs	r2, #36	; 0x24
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f929 	bl	80024c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08a      	sub	sp, #40	; 0x28
 80022c6:	af02      	add	r7, sp, #8
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d17c      	bne.n	80023dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_UART_Transmit+0x2c>
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e075      	b.n	80023de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_UART_Transmit+0x3e>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e06e      	b.n	80023de <HAL_UART_Transmit+0x11c>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fd75 	bl	8000e04 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002330:	d108      	bne.n	8002344 <HAL_UART_Transmit+0x82>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e003      	b.n	800234c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002354:	e02a      	b.n	80023ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2200      	movs	r2, #0
 800235e:	2180      	movs	r1, #128	; 0x80
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f840 	bl	80023e6 <UART_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e036      	b.n	80023de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3302      	adds	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e007      	b.n	800239e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1cf      	bne.n	8002356 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f810 	bl	80023e6 <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e006      	b.n	80023de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	e000      	b.n	80023de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023dc:	2302      	movs	r3, #2
  }
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b090      	sub	sp, #64	; 0x40
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f6:	e050      	b.n	800249a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d04c      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <UART_WaitOnFlagUntilTimeout+0x30>
 8002406:	f7fe fcfd 	bl	8000e04 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002412:	429a      	cmp	r2, r3
 8002414:	d241      	bcs.n	800249a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	330c      	adds	r3, #12
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	e853 3f00 	ldrex	r3, [r3]
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800242c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002436:	637a      	str	r2, [r7, #52]	; 0x34
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800243c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1e5      	bne.n	8002416 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	613b      	str	r3, [r7, #16]
   return(result);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	63bb      	str	r3, [r7, #56]	; 0x38
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3314      	adds	r3, #20
 8002468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800246a:	623a      	str	r2, [r7, #32]
 800246c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246e:	69f9      	ldr	r1, [r7, #28]
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	e841 2300 	strex	r3, r2, [r1]
 8002476:	61bb      	str	r3, [r7, #24]
   return(result);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e5      	bne.n	800244a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e00f      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d09f      	beq.n	80023f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3740      	adds	r7, #64	; 0x40
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c8:	b09f      	sub	sp, #124	; 0x7c
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024da:	68d9      	ldr	r1, [r3, #12]
 80024dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	ea40 0301 	orr.w	r3, r0, r1
 80024e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80024fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002508:	f021 010c 	bic.w	r1, r1, #12
 800250c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002512:	430b      	orrs	r3, r1
 8002514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002522:	6999      	ldr	r1, [r3, #24]
 8002524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	ea40 0301 	orr.w	r3, r0, r1
 800252c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800252e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4bc5      	ldr	r3, [pc, #788]	; (8002848 <UART_SetConfig+0x384>)
 8002534:	429a      	cmp	r2, r3
 8002536:	d004      	beq.n	8002542 <UART_SetConfig+0x7e>
 8002538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4bc3      	ldr	r3, [pc, #780]	; (800284c <UART_SetConfig+0x388>)
 800253e:	429a      	cmp	r2, r3
 8002540:	d103      	bne.n	800254a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002542:	f7ff fb7d 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8002546:	6778      	str	r0, [r7, #116]	; 0x74
 8002548:	e002      	b.n	8002550 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800254a:	f7ff fb65 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 800254e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002558:	f040 80b6 	bne.w	80026c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800255c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800255e:	461c      	mov	r4, r3
 8002560:	f04f 0500 	mov.w	r5, #0
 8002564:	4622      	mov	r2, r4
 8002566:	462b      	mov	r3, r5
 8002568:	1891      	adds	r1, r2, r2
 800256a:	6439      	str	r1, [r7, #64]	; 0x40
 800256c:	415b      	adcs	r3, r3
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
 8002570:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002574:	1912      	adds	r2, r2, r4
 8002576:	eb45 0303 	adc.w	r3, r5, r3
 800257a:	f04f 0000 	mov.w	r0, #0
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	00d9      	lsls	r1, r3, #3
 8002584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002588:	00d0      	lsls	r0, r2, #3
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	1911      	adds	r1, r2, r4
 8002590:	6639      	str	r1, [r7, #96]	; 0x60
 8002592:	416b      	adcs	r3, r5
 8002594:	667b      	str	r3, [r7, #100]	; 0x64
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	1891      	adds	r1, r2, r2
 80025a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80025a4:	415b      	adcs	r3, r3
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025b0:	f7fd fe66 	bl	8000280 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4ba5      	ldr	r3, [pc, #660]	; (8002850 <UART_SetConfig+0x38c>)
 80025ba:	fba3 2302 	umull	r2, r3, r3, r2
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	011e      	lsls	r6, r3, #4
 80025c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c4:	461c      	mov	r4, r3
 80025c6:	f04f 0500 	mov.w	r5, #0
 80025ca:	4622      	mov	r2, r4
 80025cc:	462b      	mov	r3, r5
 80025ce:	1891      	adds	r1, r2, r2
 80025d0:	6339      	str	r1, [r7, #48]	; 0x30
 80025d2:	415b      	adcs	r3, r3
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
 80025d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025da:	1912      	adds	r2, r2, r4
 80025dc:	eb45 0303 	adc.w	r3, r5, r3
 80025e0:	f04f 0000 	mov.w	r0, #0
 80025e4:	f04f 0100 	mov.w	r1, #0
 80025e8:	00d9      	lsls	r1, r3, #3
 80025ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025ee:	00d0      	lsls	r0, r2, #3
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	1911      	adds	r1, r2, r4
 80025f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80025f8:	416b      	adcs	r3, r5
 80025fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	461a      	mov	r2, r3
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	1891      	adds	r1, r2, r2
 8002608:	62b9      	str	r1, [r7, #40]	; 0x28
 800260a:	415b      	adcs	r3, r3
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002612:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002616:	f7fd fe33 	bl	8000280 <__aeabi_uldivmod>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4b8c      	ldr	r3, [pc, #560]	; (8002850 <UART_SetConfig+0x38c>)
 8002620:	fba3 1302 	umull	r1, r3, r3, r2
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	2164      	movs	r1, #100	; 0x64
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	3332      	adds	r3, #50	; 0x32
 8002632:	4a87      	ldr	r2, [pc, #540]	; (8002850 <UART_SetConfig+0x38c>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002640:	441e      	add	r6, r3
 8002642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002644:	4618      	mov	r0, r3
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	1894      	adds	r4, r2, r2
 8002650:	623c      	str	r4, [r7, #32]
 8002652:	415b      	adcs	r3, r3
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
 8002656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800265a:	1812      	adds	r2, r2, r0
 800265c:	eb41 0303 	adc.w	r3, r1, r3
 8002660:	f04f 0400 	mov.w	r4, #0
 8002664:	f04f 0500 	mov.w	r5, #0
 8002668:	00dd      	lsls	r5, r3, #3
 800266a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800266e:	00d4      	lsls	r4, r2, #3
 8002670:	4622      	mov	r2, r4
 8002672:	462b      	mov	r3, r5
 8002674:	1814      	adds	r4, r2, r0
 8002676:	653c      	str	r4, [r7, #80]	; 0x50
 8002678:	414b      	adcs	r3, r1
 800267a:	657b      	str	r3, [r7, #84]	; 0x54
 800267c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	461a      	mov	r2, r3
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	1891      	adds	r1, r2, r2
 8002688:	61b9      	str	r1, [r7, #24]
 800268a:	415b      	adcs	r3, r3
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002692:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002696:	f7fd fdf3 	bl	8000280 <__aeabi_uldivmod>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <UART_SetConfig+0x38c>)
 80026a0:	fba3 1302 	umull	r1, r3, r3, r2
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	2164      	movs	r1, #100	; 0x64
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	3332      	adds	r3, #50	; 0x32
 80026b2:	4a67      	ldr	r2, [pc, #412]	; (8002850 <UART_SetConfig+0x38c>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	f003 0207 	and.w	r2, r3, #7
 80026be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4432      	add	r2, r6
 80026c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026c6:	e0b9      	b.n	800283c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ca:	461c      	mov	r4, r3
 80026cc:	f04f 0500 	mov.w	r5, #0
 80026d0:	4622      	mov	r2, r4
 80026d2:	462b      	mov	r3, r5
 80026d4:	1891      	adds	r1, r2, r2
 80026d6:	6139      	str	r1, [r7, #16]
 80026d8:	415b      	adcs	r3, r3
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026e0:	1912      	adds	r2, r2, r4
 80026e2:	eb45 0303 	adc.w	r3, r5, r3
 80026e6:	f04f 0000 	mov.w	r0, #0
 80026ea:	f04f 0100 	mov.w	r1, #0
 80026ee:	00d9      	lsls	r1, r3, #3
 80026f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026f4:	00d0      	lsls	r0, r2, #3
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	eb12 0804 	adds.w	r8, r2, r4
 80026fe:	eb43 0905 	adc.w	r9, r3, r5
 8002702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4618      	mov	r0, r3
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	008b      	lsls	r3, r1, #2
 8002716:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800271a:	0082      	lsls	r2, r0, #2
 800271c:	4640      	mov	r0, r8
 800271e:	4649      	mov	r1, r9
 8002720:	f7fd fdae 	bl	8000280 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <UART_SetConfig+0x38c>)
 800272a:	fba3 2302 	umull	r2, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	011e      	lsls	r6, r3, #4
 8002732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002734:	4618      	mov	r0, r3
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	1894      	adds	r4, r2, r2
 8002740:	60bc      	str	r4, [r7, #8]
 8002742:	415b      	adcs	r3, r3
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800274a:	1812      	adds	r2, r2, r0
 800274c:	eb41 0303 	adc.w	r3, r1, r3
 8002750:	f04f 0400 	mov.w	r4, #0
 8002754:	f04f 0500 	mov.w	r5, #0
 8002758:	00dd      	lsls	r5, r3, #3
 800275a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800275e:	00d4      	lsls	r4, r2, #3
 8002760:	4622      	mov	r2, r4
 8002762:	462b      	mov	r3, r5
 8002764:	1814      	adds	r4, r2, r0
 8002766:	64bc      	str	r4, [r7, #72]	; 0x48
 8002768:	414b      	adcs	r3, r1
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	008b      	lsls	r3, r1, #2
 8002780:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002784:	0082      	lsls	r2, r0, #2
 8002786:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800278a:	f7fd fd79 	bl	8000280 <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <UART_SetConfig+0x38c>)
 8002794:	fba3 1302 	umull	r1, r3, r3, r2
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	4a2a      	ldr	r2, [pc, #168]	; (8002850 <UART_SetConfig+0x38c>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b2:	441e      	add	r6, r3
 80027b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b6:	4618      	mov	r0, r3
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	1894      	adds	r4, r2, r2
 80027c2:	603c      	str	r4, [r7, #0]
 80027c4:	415b      	adcs	r3, r3
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027cc:	1812      	adds	r2, r2, r0
 80027ce:	eb41 0303 	adc.w	r3, r1, r3
 80027d2:	f04f 0400 	mov.w	r4, #0
 80027d6:	f04f 0500 	mov.w	r5, #0
 80027da:	00dd      	lsls	r5, r3, #3
 80027dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027e0:	00d4      	lsls	r4, r2, #3
 80027e2:	4622      	mov	r2, r4
 80027e4:	462b      	mov	r3, r5
 80027e6:	eb12 0a00 	adds.w	sl, r2, r0
 80027ea:	eb43 0b01 	adc.w	fp, r3, r1
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	008b      	lsls	r3, r1, #2
 8002802:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002806:	0082      	lsls	r2, r0, #2
 8002808:	4650      	mov	r0, sl
 800280a:	4659      	mov	r1, fp
 800280c:	f7fd fd38 	bl	8000280 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <UART_SetConfig+0x38c>)
 8002816:	fba3 1302 	umull	r1, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2164      	movs	r1, #100	; 0x64
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a09      	ldr	r2, [pc, #36]	; (8002850 <UART_SetConfig+0x38c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4432      	add	r2, r6
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	377c      	adds	r7, #124	; 0x7c
 8002840:	46bd      	mov	sp, r7
 8002842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002846:	bf00      	nop
 8002848:	40011000 	.word	0x40011000
 800284c:	40011400 	.word	0x40011400
 8002850:	51eb851f 	.word	0x51eb851f

08002854 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f103 0208 	add.w	r2, r3, #8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f103 0208 	add.w	r2, r3, #8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 0208 	add.w	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d103      	bne.n	8002916 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e00c      	b.n	8002930 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3308      	adds	r3, #8
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e002      	b.n	8002924 <vListInsert+0x2e>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	d2f6      	bcs.n	800291e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6892      	ldr	r2, [r2, #8]
 800297e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6852      	ldr	r2, [r2, #4]
 8002988:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d103      	bne.n	800299c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1e5a      	subs	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b090      	sub	sp, #64	; 0x40
 80029c0:	af04      	add	r7, sp, #16
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
	TCB_t *pxNewTCB;
	BaseType_t xReturn;
    char name[20];
    strcpy(name, pcName);
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f9be 	bl	8003d54 <strcpy>
    strcat(name, "\n\r");
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fbf7 	bl	80001d0 <strlen>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461a      	mov	r2, r3
 80029e6:	f107 0310 	add.w	r3, r7, #16
 80029ea:	4413      	add	r3, r2
 80029ec:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <xTaskCreate+0xc8>)
 80029ee:	8811      	ldrh	r1, [r2, #0]
 80029f0:	7892      	ldrb	r2, [r2, #2]
 80029f2:	8019      	strh	r1, [r3, #0]
 80029f4:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)name, strlen(name), 0xffff);
 80029f6:	f107 0310 	add.w	r3, r7, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fbe8 	bl	80001d0 <strlen>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	f107 0110 	add.w	r1, r7, #16
 8002a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a0c:	481e      	ldr	r0, [pc, #120]	; (8002a88 <xTaskCreate+0xcc>)
 8002a0e:	f7ff fc58 	bl	80022c2 <HAL_UART_Transmit>
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ff3e 	bl	8003898 <pvPortMalloc>
 8002a1c:	6278      	str	r0, [r7, #36]	; 0x24

			if( pxStack != NULL )
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <xTaskCreate+0x86>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a24:	2058      	movs	r0, #88	; 0x58
 8002a26:	f000 ff37 	bl	8003898 <pvPortMalloc>
 8002a2a:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxNewTCB != NULL )
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <xTaskCreate+0x7e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
 8002a38:	e005      	b.n	8002a46 <xTaskCreate+0x8a>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a3c:	f001 f81e 	bl	8003a7c <vPortFree>
 8002a40:	e001      	b.n	8002a46 <xTaskCreate+0x8a>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <xTaskCreate+0xb8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9303      	str	r3, [sp, #12]
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f812 	bl	8002a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a6a:	f000 f89f 	bl	8002bac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a72:	e002      	b.n	8002a7a <xTaskCreate+0xbe>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		return xReturn;
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3730      	adds	r7, #48	; 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	080045b0 	.word	0x080045b0
 8002a88:	200015c0 	.word	0x200015c0

08002a8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	21a5      	movs	r1, #165	; 0xa5
 8002aa6:	f001 f92d 	bl	8003d04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f023 0307 	bic.w	r3, r3, #7
 8002ac2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ae0:	bf00      	nop
 8002ae2:	e7fe      	b.n	8002ae2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01f      	beq.n	8002b2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e012      	b.n	8002b16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	7819      	ldrb	r1, [r3, #0]
 8002af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	3334      	adds	r3, #52	; 0x34
 8002b00:	460a      	mov	r2, r1
 8002b02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d9e9      	bls.n	8002af0 <prvInitialiseNewTask+0x64>
 8002b1c:	e000      	b.n	8002b20 <prvInitialiseNewTask+0x94>
			{
				break;
 8002b1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b28:	e003      	b.n	8002b32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d901      	bls.n	8002b3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b46:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	3304      	adds	r3, #4
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fe9e 	bl	8002894 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fe99 	bl	8002894 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	f1c3 0205 	rsb	r2, r3, #5
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	68f9      	ldr	r1, [r7, #12]
 8002b8a:	69b8      	ldr	r0, [r7, #24]
 8002b8c:	f000 fc62 	bl	8003454 <pxPortInitialiseStack>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ba2:	bf00      	nop
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bb4:	f000 fd8e 	bl	80036d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <prvAddNewTaskToReadyList+0xc0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <prvAddNewTaskToReadyList+0xc0>)
 8002bc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <prvAddNewTaskToReadyList+0xc4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bca:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <prvAddNewTaskToReadyList+0xc4>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bd0:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <prvAddNewTaskToReadyList+0xc0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d110      	bne.n	8002bfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bd8:	f000 fb38 	bl	800324c <prvInitialiseTaskLists>
 8002bdc:	e00d      	b.n	8002bfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <prvAddNewTaskToReadyList+0xc8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <prvAddNewTaskToReadyList+0xc4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d802      	bhi.n	8002bfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <prvAddNewTaskToReadyList+0xc4>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <prvAddNewTaskToReadyList+0xcc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <prvAddNewTaskToReadyList+0xcc>)
 8002c02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <prvAddNewTaskToReadyList+0xcc>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2201      	movs	r2, #1
 8002c12:	409a      	lsls	r2, r3
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <prvAddNewTaskToReadyList+0xd0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <prvAddNewTaskToReadyList+0xd0>)
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <prvAddNewTaskToReadyList+0xd4>)
 8002c2c:	441a      	add	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3304      	adds	r3, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f7ff fe3a 	bl	80028ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c3a:	f000 fd7b 	bl	8003734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <prvAddNewTaskToReadyList+0xc8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <prvAddNewTaskToReadyList+0xc4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d207      	bcs.n	8002c64 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <prvAddNewTaskToReadyList+0xd8>)
 8002c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000170 	.word	0x20000170
 8002c70:	20000098 	.word	0x20000098
 8002c74:	2000017c 	.word	0x2000017c
 8002c78:	2000018c 	.word	0x2000018c
 8002c7c:	20000178 	.word	0x20000178
 8002c80:	2000009c 	.word	0x2000009c
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002c90:	f000 fd20 	bl	80036d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <vTaskDelete+0x18>
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <vTaskDelete+0xf8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	e000      	b.n	8002ca2 <vTaskDelete+0x1a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fe5d 	bl	8002968 <uxListRemove>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d115      	bne.n	8002ce0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb8:	4932      	ldr	r1, [pc, #200]	; (8002d84 <vTaskDelete+0xfc>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <vTaskDelete+0x58>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2201      	movs	r2, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <vTaskDelete+0x100>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <vTaskDelete+0x100>)
 8002cde:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3318      	adds	r3, #24
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fe3b 	bl	8002968 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <vTaskDelete+0x104>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	4a24      	ldr	r2, [pc, #144]	; (8002d8c <vTaskDelete+0x104>)
 8002cfa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <vTaskDelete+0xf8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d10b      	bne.n	8002d1e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4820      	ldr	r0, [pc, #128]	; (8002d90 <vTaskDelete+0x108>)
 8002d0e:	f7ff fdce 	bl	80028ae <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <vTaskDelete+0x10c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <vTaskDelete+0x10c>)
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e009      	b.n	8002d32 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <vTaskDelete+0x110>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <vTaskDelete+0x110>)
 8002d26:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fafd 	bl	8003328 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002d2e:	f000 fb0b 	bl	8003348 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002d32:	f000 fcff 	bl	8003734 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <vTaskDelete+0x114>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01b      	beq.n	8002d76 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <vTaskDelete+0xf8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d116      	bne.n	8002d76 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <vTaskDelete+0x118>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <vTaskDelete+0xde>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	60bb      	str	r3, [r7, #8]
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <vTaskDelete+0x11c>)
 8002d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000098 	.word	0x20000098
 8002d84:	2000009c 	.word	0x2000009c
 8002d88:	20000178 	.word	0x20000178
 8002d8c:	2000018c 	.word	0x2000018c
 8002d90:	20000144 	.word	0x20000144
 8002d94:	20000158 	.word	0x20000158
 8002d98:	20000170 	.word	0x20000170
 8002d9c:	2000017c 	.word	0x2000017c
 8002da0:	20000198 	.word	0x20000198
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d017      	beq.n	8002dea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <vTaskDelay+0x60>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <vTaskDelay+0x30>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	60bb      	str	r3, [r7, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002dd8:	f000 f862 	bl	8002ea0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ddc:	2100      	movs	r1, #0
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fad2 	bl	8003388 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002de4:	f000 f86a 	bl	8002ebc <xTaskResumeAll>
 8002de8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <vTaskDelay+0x64>)
 8002df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000198 	.word	0x20000198
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <vTaskStartScheduler+0x78>)
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2282      	movs	r2, #130	; 0x82
 8002e22:	491a      	ldr	r1, [pc, #104]	; (8002e8c <vTaskStartScheduler+0x7c>)
 8002e24:	481a      	ldr	r0, [pc, #104]	; (8002e90 <vTaskStartScheduler+0x80>)
 8002e26:	f7ff fdc9 	bl	80029bc <xTaskCreate>
 8002e2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d116      	bne.n	8002e60 <vTaskStartScheduler+0x50>
	__asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	60bb      	str	r3, [r7, #8]
}
 8002e44:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <vTaskStartScheduler+0x84>)
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <vTaskStartScheduler+0x88>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <vTaskStartScheduler+0x8c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e5a:	f000 fb89 	bl	8003570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e5e:	e00e      	b.n	8002e7e <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d10a      	bne.n	8002e7e <vTaskStartScheduler+0x6e>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	607b      	str	r3, [r7, #4]
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <vTaskStartScheduler+0x6c>
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000194 	.word	0x20000194
 8002e8c:	080045b4 	.word	0x080045b4
 8002e90:	0800321d 	.word	0x0800321d
 8002e94:	20000190 	.word	0x20000190
 8002e98:	2000017c 	.word	0x2000017c
 8002e9c:	20000174 	.word	0x20000174

08002ea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <vTaskSuspendAll+0x18>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <vTaskSuspendAll+0x18>)
 8002eac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	20000198 	.word	0x20000198

08002ebc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <xTaskResumeAll+0x114>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	603b      	str	r3, [r7, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ee8:	f000 fbf4 	bl	80036d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <xTaskResumeAll+0x114>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <xTaskResumeAll+0x114>)
 8002ef4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <xTaskResumeAll+0x114>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d161      	bne.n	8002fc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002efe:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <xTaskResumeAll+0x118>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d05d      	beq.n	8002fc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f06:	e02e      	b.n	8002f66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <xTaskResumeAll+0x11c>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3318      	adds	r3, #24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fd27 	bl	8002968 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fd22 	bl	8002968 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <xTaskResumeAll+0x120>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <xTaskResumeAll+0x120>)
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <xTaskResumeAll+0x124>)
 8002f44:	441a      	add	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f7ff fcae 	bl	80028ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <xTaskResumeAll+0x128>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <xTaskResumeAll+0x12c>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <xTaskResumeAll+0x11c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1cc      	bne.n	8002f08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f74:	f000 f9e8 	bl	8003348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <xTaskResumeAll+0x130>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f84:	f000 f836 	bl	8002ff4 <xTaskIncrementTick>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <xTaskResumeAll+0x12c>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f1      	bne.n	8002f84 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <xTaskResumeAll+0x130>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <xTaskResumeAll+0x12c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <xTaskResumeAll+0x134>)
 8002fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fc2:	f000 fbb7 	bl	8003734 <vPortExitCritical>

	return xAlreadyYielded;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000198 	.word	0x20000198
 8002fd4:	20000170 	.word	0x20000170
 8002fd8:	20000130 	.word	0x20000130
 8002fdc:	20000178 	.word	0x20000178
 8002fe0:	2000009c 	.word	0x2000009c
 8002fe4:	20000098 	.word	0x20000098
 8002fe8:	20000184 	.word	0x20000184
 8002fec:	20000180 	.word	0x20000180
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ffe:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <xTaskIncrementTick+0x144>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 8088 	bne.w	8003118 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003008:	4b4c      	ldr	r3, [pc, #304]	; (800313c <xTaskIncrementTick+0x148>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003010:	4a4a      	ldr	r2, [pc, #296]	; (800313c <xTaskIncrementTick+0x148>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d120      	bne.n	800305e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800301c:	4b48      	ldr	r3, [pc, #288]	; (8003140 <xTaskIncrementTick+0x14c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <xTaskIncrementTick+0x48>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	603b      	str	r3, [r7, #0]
}
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <xTaskIncrementTick+0x46>
 800303c:	4b40      	ldr	r3, [pc, #256]	; (8003140 <xTaskIncrementTick+0x14c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b40      	ldr	r3, [pc, #256]	; (8003144 <xTaskIncrementTick+0x150>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3e      	ldr	r2, [pc, #248]	; (8003140 <xTaskIncrementTick+0x14c>)
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4a3e      	ldr	r2, [pc, #248]	; (8003144 <xTaskIncrementTick+0x150>)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <xTaskIncrementTick+0x154>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <xTaskIncrementTick+0x154>)
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	f000 f975 	bl	8003348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <xTaskIncrementTick+0x158>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d348      	bcc.n	80030fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <xTaskIncrementTick+0x14c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003072:	4b36      	ldr	r3, [pc, #216]	; (800314c <xTaskIncrementTick+0x158>)
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	601a      	str	r2, [r3, #0]
					break;
 800307a:	e03e      	b.n	80030fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800307c:	4b30      	ldr	r3, [pc, #192]	; (8003140 <xTaskIncrementTick+0x14c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d203      	bcs.n	800309c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <xTaskIncrementTick+0x158>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800309a:	e02e      	b.n	80030fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3304      	adds	r3, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fc61 	bl	8002968 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3318      	adds	r3, #24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fc58 	bl	8002968 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	2201      	movs	r2, #1
 80030be:	409a      	lsls	r2, r3
 80030c0:	4b23      	ldr	r3, [pc, #140]	; (8003150 <xTaskIncrementTick+0x15c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	4a22      	ldr	r2, [pc, #136]	; (8003150 <xTaskIncrementTick+0x15c>)
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <xTaskIncrementTick+0x160>)
 80030d8:	441a      	add	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3304      	adds	r3, #4
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f7ff fbe4 	bl	80028ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <xTaskIncrementTick+0x164>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d3b9      	bcc.n	8003068 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f8:	e7b6      	b.n	8003068 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <xTaskIncrementTick+0x164>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003100:	4914      	ldr	r1, [pc, #80]	; (8003154 <xTaskIncrementTick+0x160>)
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d907      	bls.n	8003122 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003112:	2301      	movs	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e004      	b.n	8003122 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <xTaskIncrementTick+0x168>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	4a0f      	ldr	r2, [pc, #60]	; (800315c <xTaskIncrementTick+0x168>)
 8003120:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <xTaskIncrementTick+0x16c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800312a:	2301      	movs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800312e:	697b      	ldr	r3, [r7, #20]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000198 	.word	0x20000198
 800313c:	20000174 	.word	0x20000174
 8003140:	20000128 	.word	0x20000128
 8003144:	2000012c 	.word	0x2000012c
 8003148:	20000188 	.word	0x20000188
 800314c:	20000190 	.word	0x20000190
 8003150:	20000178 	.word	0x20000178
 8003154:	2000009c 	.word	0x2000009c
 8003158:	20000098 	.word	0x20000098
 800315c:	20000180 	.word	0x20000180
 8003160:	20000184 	.word	0x20000184

08003164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800316a:	4b27      	ldr	r3, [pc, #156]	; (8003208 <vTaskSwitchContext+0xa4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <vTaskSwitchContext+0xa8>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003178:	e03f      	b.n	80031fa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <vTaskSwitchContext+0xa8>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <vTaskSwitchContext+0xac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800318e:	7afb      	ldrb	r3, [r7, #11]
 8003190:	f1c3 031f 	rsb	r3, r3, #31
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	491f      	ldr	r1, [pc, #124]	; (8003214 <vTaskSwitchContext+0xb0>)
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	607b      	str	r3, [r7, #4]
}
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <vTaskSwitchContext+0x5a>
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <vTaskSwitchContext+0xb0>)
 80031cc:	4413      	add	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	3308      	adds	r3, #8
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d104      	bne.n	80031f0 <vTaskSwitchContext+0x8c>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	605a      	str	r2, [r3, #4]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <vTaskSwitchContext+0xb4>)
 80031f8:	6013      	str	r3, [r2, #0]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000198 	.word	0x20000198
 800320c:	20000184 	.word	0x20000184
 8003210:	20000178 	.word	0x20000178
 8003214:	2000009c 	.word	0x2000009c
 8003218:	20000098 	.word	0x20000098

0800321c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003224:	f000 f852 	bl	80032cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <prvIdleTask+0x28>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d9f9      	bls.n	8003224 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <prvIdleTask+0x2c>)
 8003232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003240:	e7f0      	b.n	8003224 <prvIdleTask+0x8>
 8003242:	bf00      	nop
 8003244:	2000009c 	.word	0x2000009c
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	e00c      	b.n	8003272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4a12      	ldr	r2, [pc, #72]	; (80032ac <prvInitialiseTaskLists+0x60>)
 8003264:	4413      	add	r3, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff faf4 	bl	8002854 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3301      	adds	r3, #1
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d9ef      	bls.n	8003258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <prvInitialiseTaskLists+0x64>)
 800327a:	f7ff faeb 	bl	8002854 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800327e:	480d      	ldr	r0, [pc, #52]	; (80032b4 <prvInitialiseTaskLists+0x68>)
 8003280:	f7ff fae8 	bl	8002854 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003284:	480c      	ldr	r0, [pc, #48]	; (80032b8 <prvInitialiseTaskLists+0x6c>)
 8003286:	f7ff fae5 	bl	8002854 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800328a:	480c      	ldr	r0, [pc, #48]	; (80032bc <prvInitialiseTaskLists+0x70>)
 800328c:	f7ff fae2 	bl	8002854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003290:	480b      	ldr	r0, [pc, #44]	; (80032c0 <prvInitialiseTaskLists+0x74>)
 8003292:	f7ff fadf 	bl	8002854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <prvInitialiseTaskLists+0x78>)
 8003298:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <prvInitialiseTaskLists+0x64>)
 800329a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <prvInitialiseTaskLists+0x7c>)
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <prvInitialiseTaskLists+0x68>)
 80032a0:	601a      	str	r2, [r3, #0]
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	2000009c 	.word	0x2000009c
 80032b0:	20000100 	.word	0x20000100
 80032b4:	20000114 	.word	0x20000114
 80032b8:	20000130 	.word	0x20000130
 80032bc:	20000144 	.word	0x20000144
 80032c0:	2000015c 	.word	0x2000015c
 80032c4:	20000128 	.word	0x20000128
 80032c8:	2000012c 	.word	0x2000012c

080032cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032d2:	e019      	b.n	8003308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032d4:	f000 f9fe 	bl	80036d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <prvCheckTasksWaitingTermination+0x50>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fb3f 	bl	8002968 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <prvCheckTasksWaitingTermination+0x54>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <prvCheckTasksWaitingTermination+0x54>)
 80032f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <prvCheckTasksWaitingTermination+0x58>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <prvCheckTasksWaitingTermination+0x58>)
 80032fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032fe:	f000 fa19 	bl	8003734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f810 	bl	8003328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <prvCheckTasksWaitingTermination+0x58>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e1      	bne.n	80032d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000144 	.word	0x20000144
 8003320:	20000170 	.word	0x20000170
 8003324:	20000158 	.word	0x20000158

08003328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fba1 	bl	8003a7c <vPortFree>
			vPortFree( pxTCB );
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fb9e 	bl	8003a7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <prvResetNextTaskUnblockTime+0x38>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <prvResetNextTaskUnblockTime+0x3c>)
 800335a:	f04f 32ff 	mov.w	r2, #4294967295
 800335e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003360:	e008      	b.n	8003374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <prvResetNextTaskUnblockTime+0x38>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a04      	ldr	r2, [pc, #16]	; (8003384 <prvResetNextTaskUnblockTime+0x3c>)
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000128 	.word	0x20000128
 8003384:	20000190 	.word	0x20000190

08003388 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <prvAddCurrentTaskToDelayedList+0xb4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fae2 	bl	8002968 <uxListRemove>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	2201      	movs	r2, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	4b21      	ldr	r3, [pc, #132]	; (8003440 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4013      	ands	r3, r2
 80033be:	4a20      	ldr	r2, [pc, #128]	; (8003440 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d10a      	bne.n	80033e0 <prvAddCurrentTaskToDelayedList+0x58>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	481a      	ldr	r0, [pc, #104]	; (8003444 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033da:	f7ff fa68 	bl	80028ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033de:	e026      	b.n	800342e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d209      	bcs.n	800340c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <prvAddCurrentTaskToDelayedList+0xb4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f7ff fa76 	bl	80028f6 <vListInsert>
}
 800340a:	e010      	b.n	800342e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <prvAddCurrentTaskToDelayedList+0xc4>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f7ff fa6c 	bl	80028f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	d202      	bcs.n	800342e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003428:	4a09      	ldr	r2, [pc, #36]	; (8003450 <prvAddCurrentTaskToDelayedList+0xc8>)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6013      	str	r3, [r2, #0]
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000174 	.word	0x20000174
 800343c:	20000098 	.word	0x20000098
 8003440:	20000178 	.word	0x20000178
 8003444:	2000015c 	.word	0x2000015c
 8003448:	2000012c 	.word	0x2000012c
 800344c:	20000128 	.word	0x20000128
 8003450:	20000190 	.word	0x20000190

08003454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b04      	subs	r3, #4
 8003464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800346c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3b04      	subs	r3, #4
 8003472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3b04      	subs	r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003484:	4a0c      	ldr	r2, [pc, #48]	; (80034b8 <pxPortInitialiseStack+0x64>)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3b14      	subs	r3, #20
 800348e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3b04      	subs	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f06f 0202 	mvn.w	r2, #2
 80034a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3b20      	subs	r3, #32
 80034a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034aa:	68fb      	ldr	r3, [r7, #12]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	080034bd 	.word	0x080034bd

080034bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <prvTaskExitError+0x54>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d00a      	beq.n	80034e6 <prvTaskExitError+0x2a>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <prvTaskExitError+0x28>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	60bb      	str	r3, [r7, #8]
}
 80034f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034fa:	bf00      	nop
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0fc      	beq.n	80034fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	2000000c 	.word	0x2000000c
	...

08003520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <pxCurrentTCBConst2>)
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	6808      	ldr	r0, [r1, #0]
 8003526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352a:	f380 8809 	msr	PSP, r0
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8811 	msr	BASEPRI, r0
 800353a:	4770      	bx	lr
 800353c:	f3af 8000 	nop.w

08003540 <pxCurrentTCBConst2>:
 8003540:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop

08003548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003548:	4808      	ldr	r0, [pc, #32]	; (800356c <prvPortStartFirstTask+0x24>)
 800354a:	6800      	ldr	r0, [r0, #0]
 800354c:	6800      	ldr	r0, [r0, #0]
 800354e:	f380 8808 	msr	MSP, r0
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8814 	msr	CONTROL, r0
 800355a:	b662      	cpsie	i
 800355c:	b661      	cpsie	f
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	df00      	svc	0
 8003568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800356a:	bf00      	nop
 800356c:	e000ed08 	.word	0xe000ed08

08003570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003576:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <xPortStartScheduler+0x140>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a4e      	ldr	r2, [pc, #312]	; (80036b4 <xPortStartScheduler+0x144>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10a      	bne.n	8003596 <xPortStartScheduler+0x26>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	61bb      	str	r3, [r7, #24]
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003596:	4b46      	ldr	r3, [pc, #280]	; (80036b0 <xPortStartScheduler+0x140>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a47      	ldr	r2, [pc, #284]	; (80036b8 <xPortStartScheduler+0x148>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10a      	bne.n	80035b6 <xPortStartScheduler+0x46>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	617b      	str	r3, [r7, #20]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <xPortStartScheduler+0x14c>)
 80035b8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	22ff      	movs	r2, #255	; 0xff
 80035c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <xPortStartScheduler+0x150>)
 80035dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <xPortStartScheduler+0x154>)
 80035e0:	2207      	movs	r2, #7
 80035e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035e4:	e009      	b.n	80035fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <xPortStartScheduler+0x154>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <xPortStartScheduler+0x154>)
 80035ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d0ef      	beq.n	80035e6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <xPortStartScheduler+0x154>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f1c3 0307 	rsb	r3, r3, #7
 800360e:	2b04      	cmp	r3, #4
 8003610:	d00a      	beq.n	8003628 <xPortStartScheduler+0xb8>
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	613b      	str	r3, [r7, #16]
}
 8003624:	bf00      	nop
 8003626:	e7fe      	b.n	8003626 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003628:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <xPortStartScheduler+0x154>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1c3 0307 	rsb	r3, r3, #7
 8003630:	2b04      	cmp	r3, #4
 8003632:	d00a      	beq.n	800364a <xPortStartScheduler+0xda>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	60fb      	str	r3, [r7, #12]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <xPortStartScheduler+0x154>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4a1c      	ldr	r2, [pc, #112]	; (80036c4 <xPortStartScheduler+0x154>)
 8003652:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <xPortStartScheduler+0x154>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800365c:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <xPortStartScheduler+0x154>)
 800365e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <xPortStartScheduler+0x158>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <xPortStartScheduler+0x158>)
 800366e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003672:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <xPortStartScheduler+0x158>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <xPortStartScheduler+0x158>)
 800367a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800367e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003680:	f000 f8dc 	bl	800383c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <xPortStartScheduler+0x15c>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800368a:	f000 f8fb 	bl	8003884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <xPortStartScheduler+0x160>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a0f      	ldr	r2, [pc, #60]	; (80036d0 <xPortStartScheduler+0x160>)
 8003694:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003698:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800369a:	f7ff ff55 	bl	8003548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800369e:	f7ff fd61 	bl	8003164 <vTaskSwitchContext>
	prvTaskExitError();
 80036a2:	f7ff ff0b 	bl	80034bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	e000ed00 	.word	0xe000ed00
 80036b4:	410fc271 	.word	0x410fc271
 80036b8:	410fc270 	.word	0x410fc270
 80036bc:	e000e400 	.word	0xe000e400
 80036c0:	2000019c 	.word	0x2000019c
 80036c4:	200001a0 	.word	0x200001a0
 80036c8:	e000ed20 	.word	0xe000ed20
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	e000ef34 	.word	0xe000ef34

080036d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	607b      	str	r3, [r7, #4]
}
 80036ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036ee:	4b0f      	ldr	r3, [pc, #60]	; (800372c <vPortEnterCritical+0x58>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <vPortEnterCritical+0x58>)
 80036f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <vPortEnterCritical+0x58>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10f      	bne.n	8003720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <vPortEnterCritical+0x5c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <vPortEnterCritical+0x4c>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	603b      	str	r3, [r7, #0]
}
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <vPortEnterCritical+0x4a>
	}
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	2000000c 	.word	0x2000000c
 8003730:	e000ed04 	.word	0xe000ed04

08003734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <vPortExitCritical+0x50>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <vPortExitCritical+0x24>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	607b      	str	r3, [r7, #4]
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <vPortExitCritical+0x50>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3b01      	subs	r3, #1
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <vPortExitCritical+0x50>)
 8003760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <vPortExitCritical+0x50>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <vPortExitCritical+0x42>
 800376a:	2300      	movs	r3, #0
 800376c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	2000000c 	.word	0x2000000c
	...

08003790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003790:	f3ef 8009 	mrs	r0, PSP
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <pxCurrentTCBConst>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f01e 0f10 	tst.w	lr, #16
 80037a0:	bf08      	it	eq
 80037a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037aa:	6010      	str	r0, [r2, #0]
 80037ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037b4:	f380 8811 	msr	BASEPRI, r0
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f7ff fcd0 	bl	8003164 <vTaskSwitchContext>
 80037c4:	f04f 0000 	mov.w	r0, #0
 80037c8:	f380 8811 	msr	BASEPRI, r0
 80037cc:	bc09      	pop	{r0, r3}
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	6808      	ldr	r0, [r1, #0]
 80037d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d6:	f01e 0f10 	tst.w	lr, #16
 80037da:	bf08      	it	eq
 80037dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037e0:	f380 8809 	msr	PSP, r0
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	f3af 8000 	nop.w

080037f0 <pxCurrentTCBConst>:
 80037f0:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop

080037f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	607b      	str	r3, [r7, #4]
}
 8003810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003812:	f7ff fbef 	bl	8002ff4 <xTaskIncrementTick>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <SysTick_Handler+0x40>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f383 8811 	msr	BASEPRI, r3
}
 800382e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <vPortSetupTimerInterrupt+0x34>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <vPortSetupTimerInterrupt+0x38>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <vPortSetupTimerInterrupt+0x3c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <vPortSetupTimerInterrupt+0x40>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <vPortSetupTimerInterrupt+0x44>)
 800385a:	3b01      	subs	r3, #1
 800385c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <vPortSetupTimerInterrupt+0x34>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e010 	.word	0xe000e010
 8003874:	e000e018 	.word	0xe000e018
 8003878:	20000000 	.word	0x20000000
 800387c:	10624dd3 	.word	0x10624dd3
 8003880:	e000e014 	.word	0xe000e014

08003884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003894 <vPortEnableVFP+0x10>
 8003888:	6801      	ldr	r1, [r0, #0]
 800388a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800388e:	6001      	str	r1, [r0, #0]
 8003890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003892:	bf00      	nop
 8003894:	e000ed88 	.word	0xe000ed88

08003898 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockHolding;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b0a2      	sub	sp, #136	; 0x88
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	677b      	str	r3, [r7, #116]	; 0x74
size_t BlockSize, WantedSize;
char data[80];
WantedSize = xWantedSize;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	667b      	str	r3, [r7, #100]	; 0x64

	vTaskSuspendAll();
 80038a8:	f7ff fafa 	bl	8002ea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80038ac:	4b6d      	ldr	r3, [pc, #436]	; (8003a64 <pvPortMalloc+0x1cc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <pvPortMalloc+0x26>
		{
			prvHeapInit();
 80038b4:	f000 f95c 	bl	8003b70 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80038b8:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <pvPortMalloc+0x1cc>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00e      	beq.n	80038e2 <pvPortMalloc+0x4a>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80038c4:	2308      	movs	r3, #8
 80038c6:	461a      	mov	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d004      	beq.n	80038e2 <pvPortMalloc+0x4a>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f023 0307 	bic.w	r3, r3, #7
 80038de:	3308      	adds	r3, #8
 80038e0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8098 	beq.w	8003a1a <pvPortMalloc+0x182>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f241 32f7 	movw	r2, #5111	; 0x13f7
 80038f0:	4293      	cmp	r3, r2
 80038f2:	f200 8092 	bhi.w	8003a1a <pvPortMalloc+0x182>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80038f6:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <pvPortMalloc+0x1d0>)
 80038f8:	67bb      	str	r3, [r7, #120]	; 0x78
			pxBlock = xStart.pxNextFreeBlock;
 80038fa:	4b5b      	ldr	r3, [pc, #364]	; (8003a68 <pvPortMalloc+0x1d0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	67fb      	str	r3, [r7, #124]	; 0x7c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003900:	e004      	b.n	800390c <pvPortMalloc+0x74>
			{
				pxPreviousBlock = pxBlock;
 8003902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003904:	67bb      	str	r3, [r7, #120]	; 0x78
				pxBlock = pxBlock->pxNextFreeBlock;
 8003906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	67fb      	str	r3, [r7, #124]	; 0x7c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800390c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d903      	bls.n	800391e <pvPortMalloc+0x86>
 8003916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f1      	bne.n	8003902 <pvPortMalloc+0x6a>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800391e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003920:	4a52      	ldr	r2, [pc, #328]	; (8003a6c <pvPortMalloc+0x1d4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d079      	beq.n	8003a1a <pvPortMalloc+0x182>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2208      	movs	r2, #8
 800392c:	4413      	add	r3, r2
 800392e:	677b      	str	r3, [r7, #116]	; 0x74

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003930:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003936:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2208      	movs	r2, #8
 8003942:	0052      	lsls	r2, r2, #1
 8003944:	4293      	cmp	r3, r2
 8003946:	d961      	bls.n	8003a0c <pvPortMalloc+0x174>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003948:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	663b      	str	r3, [r7, #96]	; 0x60

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003950:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800395a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800395c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8003962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003964:	66bb      	str	r3, [r7, #104]	; 0x68
 8003966:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <pvPortMalloc+0x1d0>)
 8003968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <pvPortMalloc+0x1d0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	673b      	str	r3, [r7, #112]	; 0x70
 8003970:	e032      	b.n	80039d8 <pvPortMalloc+0x140>
 8003972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003978:	4413      	add	r3, r2
 800397a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800397c:	429a      	cmp	r2, r3
 800397e:	d10e      	bne.n	800399e <pvPortMalloc+0x106>
 8003980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	441a      	add	r2, r3
 800398a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	673b      	str	r3, [r7, #112]	; 0x70
 800399c:	e01c      	b.n	80039d8 <pvPortMalloc+0x140>
 800399e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80039a4:	4413      	add	r3, r2
 80039a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d110      	bne.n	80039ce <pvPortMalloc+0x136>
 80039ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	441a      	add	r2, r3
 80039b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80039c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	673b      	str	r3, [r7, #112]	; 0x70
 80039cc:	e004      	b.n	80039d8 <pvPortMalloc+0x140>
 80039ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	673b      	str	r3, [r7, #112]	; 0x70
 80039d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039da:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <pvPortMalloc+0x1d4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d1c8      	bne.n	8003972 <pvPortMalloc+0xda>
 80039e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e6:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <pvPortMalloc+0x1d0>)
 80039e8:	673b      	str	r3, [r7, #112]	; 0x70
 80039ea:	e002      	b.n	80039f2 <pvPortMalloc+0x15a>
 80039ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	673b      	str	r3, [r7, #112]	; 0x70
 80039f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d8f6      	bhi.n	80039ec <pvPortMalloc+0x154>
 80039fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a0a:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <pvPortMalloc+0x1d8>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <pvPortMalloc+0x1d8>)
 8003a18:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a1a:	f7ff fa4f 	bl	8002ebc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

    BlockSize = xWantedSize;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	65bb      	str	r3, [r7, #88]	; 0x58
    sprintf(data, "pvReturn: %p | heapSTRUCT_SIZE: %0d | WantedSize: %3d | BlockSize: %3d\n\r", pvReturn, heapSTRUCT_SIZE, WantedSize, BlockSize);
 8003a22:	2308      	movs	r3, #8
 8003a24:	461a      	mov	r2, r3
 8003a26:	f107 0008 	add.w	r0, r7, #8
 8003a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	4613      	mov	r3, r2
 8003a34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a36:	490f      	ldr	r1, [pc, #60]	; (8003a74 <pvPortMalloc+0x1dc>)
 8003a38:	f000 f96c 	bl	8003d14 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 0xffff);
 8003a3c:	f107 0308 	add.w	r3, r7, #8
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fbc5 	bl	80001d0 <strlen>
 8003a46:	4603      	mov	r3, r0
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	f107 0108 	add.w	r1, r7, #8
 8003a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a52:	4809      	ldr	r0, [pc, #36]	; (8003a78 <pvPortMalloc+0x1e0>)
 8003a54:	f7fe fc35 	bl	80022c2 <HAL_UART_Transmit>

	return pvReturn;
 8003a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3780      	adds	r7, #128	; 0x80
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200015b4 	.word	0x200015b4
 8003a68:	200015a4 	.word	0x200015a4
 8003a6c:	200015ac 	.word	0x200015ac
 8003a70:	20000010 	.word	0x20000010
 8003a74:	080045bc 	.word	0x080045bc
 8003a78:	200015c0 	.word	0x200015c0

08003a7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d066      	beq.n	8003b5c <vPortFree+0xe0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8003a8e:	2308      	movs	r3, #8
 8003a90:	425b      	negs	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8003a9c:	f7ff fa00 	bl	8002ea0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <vPortFree+0xe8>)
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <vPortFree+0xe8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e032      	b.n	8003b16 <vPortFree+0x9a>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d10e      	bne.n	8003adc <vPortFree+0x60>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	441a      	add	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	e01c      	b.n	8003b16 <vPortFree+0x9a>
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d110      	bne.n	8003b0c <vPortFree+0x90>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	441a      	add	r2, r3
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e004      	b.n	8003b16 <vPortFree+0x9a>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <vPortFree+0xec>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d1c8      	bne.n	8003ab0 <vPortFree+0x34>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <vPortFree+0xe8>)
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e002      	b.n	8003b30 <vPortFree+0xb4>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d8f6      	bhi.n	8003b2a <vPortFree+0xae>
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <vPortFree+0xf0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4413      	add	r3, r2
 8003b54:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <vPortFree+0xf0>)
 8003b56:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8003b58:	f7ff f9b0 	bl	8002ebc <xTaskResumeAll>
	}
}
 8003b5c:	bf00      	nop
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200015a4 	.word	0x200015a4
 8003b68:	200015ac 	.word	0x200015ac
 8003b6c:	20000010 	.word	0x20000010

08003b70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <prvHeapInit+0x48>)
 8003b78:	f023 0307 	bic.w	r3, r3, #7
 8003b7c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b7e:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <prvHeapInit+0x4c>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <prvHeapInit+0x4c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <prvHeapInit+0x50>)
 8003b8c:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003b90:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <prvHeapInit+0x50>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <prvHeapInit+0x50>)
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	200001ac 	.word	0x200001ac
 8003bbc:	200015a4 	.word	0x200015a4
 8003bc0:	200015ac 	.word	0x200015ac

08003bc4 <vPrintFreeList>:
/*-----------------------------------------------------------*/

void vPrintFreeList(void)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b099      	sub	sp, #100	; 0x64
 8003bc8:	af02      	add	r7, sp, #8
     * > sprintf(data, "%p         %d           %4d         %p\n\r", ...);
     * > sprintf(data, "configADJUSTED_HEAP_SIZE: %0d xFreeBytesRemaining: %0d\n\r", ...);
     */
	//&xEnd
	char data[80];
	sprintf(data, "StartAddress heapSTRUCT_SIZE xBlockSize EndAddress\n\r");
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	492b      	ldr	r1, [pc, #172]	; (8003c7c <vPrintFreeList+0xb8>)
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f8a0 	bl	8003d14 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 0xffff);
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fafa 	bl	80001d0 <strlen>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	1d39      	adds	r1, r7, #4
 8003be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003be6:	4826      	ldr	r0, [pc, #152]	; (8003c80 <vPrintFreeList+0xbc>)
 8003be8:	f7fe fb6b 	bl	80022c2 <HAL_UART_Transmit>

	BlockLink_t *temp = xStart.pxNextFreeBlock;
 8003bec:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <vPrintFreeList+0xc0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	657b      	str	r3, [r7, #84]	; 0x54

	while(temp != NULL && temp->pxNextFreeBlock != NULL){
 8003bf2:	e024      	b.n	8003c3e <vPrintFreeList+0x7a>
		memset(data, '\0', sizeof(data));
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	2250      	movs	r2, #80	; 0x50
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f882 	bl	8003d04 <memset>
		sprintf(data, "%p         %d           %4d         %p\n\r",temp,heapSTRUCT_SIZE,temp->xBlockSize,(uint32_t)temp+(uint32_t)temp->xBlockSize);
 8003c00:	2308      	movs	r3, #8
 8003c02:	461c      	mov	r4, r3
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c0a:	6851      	ldr	r1, [r2, #4]
 8003c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c0e:	440a      	add	r2, r1
 8003c10:	1d38      	adds	r0, r7, #4
 8003c12:	9201      	str	r2, [sp, #4]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4623      	mov	r3, r4
 8003c18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c1a:	491b      	ldr	r1, [pc, #108]	; (8003c88 <vPrintFreeList+0xc4>)
 8003c1c:	f000 f87a 	bl	8003d14 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 0xffff);
 8003c20:	1d3b      	adds	r3, r7, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fc fad4 	bl	80001d0 <strlen>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	1d39      	adds	r1, r7, #4
 8003c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c32:	4813      	ldr	r0, [pc, #76]	; (8003c80 <vPrintFreeList+0xbc>)
 8003c34:	f7fe fb45 	bl	80022c2 <HAL_UART_Transmit>
		temp = temp->pxNextFreeBlock;
 8003c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	657b      	str	r3, [r7, #84]	; 0x54
	while(temp != NULL && temp->pxNextFreeBlock != NULL){
 8003c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <vPrintFreeList+0x88>
 8003c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1d3      	bne.n	8003bf4 <vPrintFreeList+0x30>
	}

	sprintf(data, "configADJUSTED_HEAP_SIZE: %0d xFreeBytesRemaining: %0d\n\r", configADJUSTED_HEAP_SIZE,xFreeBytesRemaining);
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <vPrintFreeList+0xc8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	1d38      	adds	r0, r7, #4
 8003c52:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003c56:	490e      	ldr	r1, [pc, #56]	; (8003c90 <vPrintFreeList+0xcc>)
 8003c58:	f000 f85c 	bl	8003d14 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 0xffff);
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fab6 	bl	80001d0 <strlen>
 8003c64:	4603      	mov	r3, r0
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	1d39      	adds	r1, r7, #4
 8003c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6e:	4804      	ldr	r0, [pc, #16]	; (8003c80 <vPrintFreeList+0xbc>)
 8003c70:	f7fe fb27 	bl	80022c2 <HAL_UART_Transmit>

}
 8003c74:	bf00      	nop
 8003c76:	375c      	adds	r7, #92	; 0x5c
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd90      	pop	{r4, r7, pc}
 8003c7c:	08004608 	.word	0x08004608
 8003c80:	200015c0 	.word	0x200015c0
 8003c84:	200015a4 	.word	0x200015a4
 8003c88:	08004640 	.word	0x08004640
 8003c8c:	20000010 	.word	0x20000010
 8003c90:	0800466c 	.word	0x0800466c

08003c94 <__errno>:
 8003c94:	4b01      	ldr	r3, [pc, #4]	; (8003c9c <__errno+0x8>)
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000014 	.word	0x20000014

08003ca0 <__libc_init_array>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4d0d      	ldr	r5, [pc, #52]	; (8003cd8 <__libc_init_array+0x38>)
 8003ca4:	4c0d      	ldr	r4, [pc, #52]	; (8003cdc <__libc_init_array+0x3c>)
 8003ca6:	1b64      	subs	r4, r4, r5
 8003ca8:	10a4      	asrs	r4, r4, #2
 8003caa:	2600      	movs	r6, #0
 8003cac:	42a6      	cmp	r6, r4
 8003cae:	d109      	bne.n	8003cc4 <__libc_init_array+0x24>
 8003cb0:	4d0b      	ldr	r5, [pc, #44]	; (8003ce0 <__libc_init_array+0x40>)
 8003cb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ce4 <__libc_init_array+0x44>)
 8003cb4:	f000 fc56 	bl	8004564 <_init>
 8003cb8:	1b64      	subs	r4, r4, r5
 8003cba:	10a4      	asrs	r4, r4, #2
 8003cbc:	2600      	movs	r6, #0
 8003cbe:	42a6      	cmp	r6, r4
 8003cc0:	d105      	bne.n	8003cce <__libc_init_array+0x2e>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc8:	4798      	blx	r3
 8003cca:	3601      	adds	r6, #1
 8003ccc:	e7ee      	b.n	8003cac <__libc_init_array+0xc>
 8003cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd2:	4798      	blx	r3
 8003cd4:	3601      	adds	r6, #1
 8003cd6:	e7f2      	b.n	8003cbe <__libc_init_array+0x1e>
 8003cd8:	080046fc 	.word	0x080046fc
 8003cdc:	080046fc 	.word	0x080046fc
 8003ce0:	080046fc 	.word	0x080046fc
 8003ce4:	08004700 	.word	0x08004700

08003ce8 <memcpy>:
 8003ce8:	440a      	add	r2, r1
 8003cea:	4291      	cmp	r1, r2
 8003cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cf0:	d100      	bne.n	8003cf4 <memcpy+0xc>
 8003cf2:	4770      	bx	lr
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cfe:	4291      	cmp	r1, r2
 8003d00:	d1f9      	bne.n	8003cf6 <memcpy+0xe>
 8003d02:	bd10      	pop	{r4, pc}

08003d04 <memset>:
 8003d04:	4402      	add	r2, r0
 8003d06:	4603      	mov	r3, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <siprintf>:
 8003d14:	b40e      	push	{r1, r2, r3}
 8003d16:	b500      	push	{lr}
 8003d18:	b09c      	sub	sp, #112	; 0x70
 8003d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d1c:	9002      	str	r0, [sp, #8]
 8003d1e:	9006      	str	r0, [sp, #24]
 8003d20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d24:	4809      	ldr	r0, [pc, #36]	; (8003d4c <siprintf+0x38>)
 8003d26:	9107      	str	r1, [sp, #28]
 8003d28:	9104      	str	r1, [sp, #16]
 8003d2a:	4909      	ldr	r1, [pc, #36]	; (8003d50 <siprintf+0x3c>)
 8003d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d30:	9105      	str	r1, [sp, #20]
 8003d32:	6800      	ldr	r0, [r0, #0]
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	a902      	add	r1, sp, #8
 8003d38:	f000 f870 	bl	8003e1c <_svfiprintf_r>
 8003d3c:	9b02      	ldr	r3, [sp, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	b01c      	add	sp, #112	; 0x70
 8003d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d48:	b003      	add	sp, #12
 8003d4a:	4770      	bx	lr
 8003d4c:	20000014 	.word	0x20000014
 8003d50:	ffff0208 	.word	0xffff0208

08003d54 <strcpy>:
 8003d54:	4603      	mov	r3, r0
 8003d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d5a:	f803 2b01 	strb.w	r2, [r3], #1
 8003d5e:	2a00      	cmp	r2, #0
 8003d60:	d1f9      	bne.n	8003d56 <strcpy+0x2>
 8003d62:	4770      	bx	lr

08003d64 <__ssputs_r>:
 8003d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d68:	688e      	ldr	r6, [r1, #8]
 8003d6a:	429e      	cmp	r6, r3
 8003d6c:	4682      	mov	sl, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4690      	mov	r8, r2
 8003d72:	461f      	mov	r7, r3
 8003d74:	d838      	bhi.n	8003de8 <__ssputs_r+0x84>
 8003d76:	898a      	ldrh	r2, [r1, #12]
 8003d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d7c:	d032      	beq.n	8003de4 <__ssputs_r+0x80>
 8003d7e:	6825      	ldr	r5, [r4, #0]
 8003d80:	6909      	ldr	r1, [r1, #16]
 8003d82:	eba5 0901 	sub.w	r9, r5, r1
 8003d86:	6965      	ldr	r5, [r4, #20]
 8003d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d90:	3301      	adds	r3, #1
 8003d92:	444b      	add	r3, r9
 8003d94:	106d      	asrs	r5, r5, #1
 8003d96:	429d      	cmp	r5, r3
 8003d98:	bf38      	it	cc
 8003d9a:	461d      	movcc	r5, r3
 8003d9c:	0553      	lsls	r3, r2, #21
 8003d9e:	d531      	bpl.n	8003e04 <__ssputs_r+0xa0>
 8003da0:	4629      	mov	r1, r5
 8003da2:	f000 fb39 	bl	8004418 <_malloc_r>
 8003da6:	4606      	mov	r6, r0
 8003da8:	b950      	cbnz	r0, 8003dc0 <__ssputs_r+0x5c>
 8003daa:	230c      	movs	r3, #12
 8003dac:	f8ca 3000 	str.w	r3, [sl]
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db6:	81a3      	strh	r3, [r4, #12]
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc0:	6921      	ldr	r1, [r4, #16]
 8003dc2:	464a      	mov	r2, r9
 8003dc4:	f7ff ff90 	bl	8003ce8 <memcpy>
 8003dc8:	89a3      	ldrh	r3, [r4, #12]
 8003dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd2:	81a3      	strh	r3, [r4, #12]
 8003dd4:	6126      	str	r6, [r4, #16]
 8003dd6:	6165      	str	r5, [r4, #20]
 8003dd8:	444e      	add	r6, r9
 8003dda:	eba5 0509 	sub.w	r5, r5, r9
 8003dde:	6026      	str	r6, [r4, #0]
 8003de0:	60a5      	str	r5, [r4, #8]
 8003de2:	463e      	mov	r6, r7
 8003de4:	42be      	cmp	r6, r7
 8003de6:	d900      	bls.n	8003dea <__ssputs_r+0x86>
 8003de8:	463e      	mov	r6, r7
 8003dea:	4632      	mov	r2, r6
 8003dec:	6820      	ldr	r0, [r4, #0]
 8003dee:	4641      	mov	r1, r8
 8003df0:	f000 faa8 	bl	8004344 <memmove>
 8003df4:	68a3      	ldr	r3, [r4, #8]
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	1b9b      	subs	r3, r3, r6
 8003dfa:	4432      	add	r2, r6
 8003dfc:	60a3      	str	r3, [r4, #8]
 8003dfe:	6022      	str	r2, [r4, #0]
 8003e00:	2000      	movs	r0, #0
 8003e02:	e7db      	b.n	8003dbc <__ssputs_r+0x58>
 8003e04:	462a      	mov	r2, r5
 8003e06:	f000 fb61 	bl	80044cc <_realloc_r>
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d1e1      	bne.n	8003dd4 <__ssputs_r+0x70>
 8003e10:	6921      	ldr	r1, [r4, #16]
 8003e12:	4650      	mov	r0, sl
 8003e14:	f000 fab0 	bl	8004378 <_free_r>
 8003e18:	e7c7      	b.n	8003daa <__ssputs_r+0x46>
	...

08003e1c <_svfiprintf_r>:
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	4698      	mov	r8, r3
 8003e22:	898b      	ldrh	r3, [r1, #12]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	b09d      	sub	sp, #116	; 0x74
 8003e28:	4607      	mov	r7, r0
 8003e2a:	460d      	mov	r5, r1
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	d50e      	bpl.n	8003e4e <_svfiprintf_r+0x32>
 8003e30:	690b      	ldr	r3, [r1, #16]
 8003e32:	b963      	cbnz	r3, 8003e4e <_svfiprintf_r+0x32>
 8003e34:	2140      	movs	r1, #64	; 0x40
 8003e36:	f000 faef 	bl	8004418 <_malloc_r>
 8003e3a:	6028      	str	r0, [r5, #0]
 8003e3c:	6128      	str	r0, [r5, #16]
 8003e3e:	b920      	cbnz	r0, 8003e4a <_svfiprintf_r+0x2e>
 8003e40:	230c      	movs	r3, #12
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	e0d1      	b.n	8003fee <_svfiprintf_r+0x1d2>
 8003e4a:	2340      	movs	r3, #64	; 0x40
 8003e4c:	616b      	str	r3, [r5, #20]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	9309      	str	r3, [sp, #36]	; 0x24
 8003e52:	2320      	movs	r3, #32
 8003e54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e5c:	2330      	movs	r3, #48	; 0x30
 8003e5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004008 <_svfiprintf_r+0x1ec>
 8003e62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e66:	f04f 0901 	mov.w	r9, #1
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	469a      	mov	sl, r3
 8003e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e72:	b10a      	cbz	r2, 8003e78 <_svfiprintf_r+0x5c>
 8003e74:	2a25      	cmp	r2, #37	; 0x25
 8003e76:	d1f9      	bne.n	8003e6c <_svfiprintf_r+0x50>
 8003e78:	ebba 0b04 	subs.w	fp, sl, r4
 8003e7c:	d00b      	beq.n	8003e96 <_svfiprintf_r+0x7a>
 8003e7e:	465b      	mov	r3, fp
 8003e80:	4622      	mov	r2, r4
 8003e82:	4629      	mov	r1, r5
 8003e84:	4638      	mov	r0, r7
 8003e86:	f7ff ff6d 	bl	8003d64 <__ssputs_r>
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	f000 80aa 	beq.w	8003fe4 <_svfiprintf_r+0x1c8>
 8003e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e92:	445a      	add	r2, fp
 8003e94:	9209      	str	r2, [sp, #36]	; 0x24
 8003e96:	f89a 3000 	ldrb.w	r3, [sl]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80a2 	beq.w	8003fe4 <_svfiprintf_r+0x1c8>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eaa:	f10a 0a01 	add.w	sl, sl, #1
 8003eae:	9304      	str	r3, [sp, #16]
 8003eb0:	9307      	str	r3, [sp, #28]
 8003eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8003eb8:	4654      	mov	r4, sl
 8003eba:	2205      	movs	r2, #5
 8003ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec0:	4851      	ldr	r0, [pc, #324]	; (8004008 <_svfiprintf_r+0x1ec>)
 8003ec2:	f7fc f98d 	bl	80001e0 <memchr>
 8003ec6:	9a04      	ldr	r2, [sp, #16]
 8003ec8:	b9d8      	cbnz	r0, 8003f02 <_svfiprintf_r+0xe6>
 8003eca:	06d0      	lsls	r0, r2, #27
 8003ecc:	bf44      	itt	mi
 8003ece:	2320      	movmi	r3, #32
 8003ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ed4:	0711      	lsls	r1, r2, #28
 8003ed6:	bf44      	itt	mi
 8003ed8:	232b      	movmi	r3, #43	; 0x2b
 8003eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ede:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee4:	d015      	beq.n	8003f12 <_svfiprintf_r+0xf6>
 8003ee6:	9a07      	ldr	r2, [sp, #28]
 8003ee8:	4654      	mov	r4, sl
 8003eea:	2000      	movs	r0, #0
 8003eec:	f04f 0c0a 	mov.w	ip, #10
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ef6:	3b30      	subs	r3, #48	; 0x30
 8003ef8:	2b09      	cmp	r3, #9
 8003efa:	d94e      	bls.n	8003f9a <_svfiprintf_r+0x17e>
 8003efc:	b1b0      	cbz	r0, 8003f2c <_svfiprintf_r+0x110>
 8003efe:	9207      	str	r2, [sp, #28]
 8003f00:	e014      	b.n	8003f2c <_svfiprintf_r+0x110>
 8003f02:	eba0 0308 	sub.w	r3, r0, r8
 8003f06:	fa09 f303 	lsl.w	r3, r9, r3
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	46a2      	mov	sl, r4
 8003f10:	e7d2      	b.n	8003eb8 <_svfiprintf_r+0x9c>
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	1d19      	adds	r1, r3, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	9103      	str	r1, [sp, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bfbb      	ittet	lt
 8003f1e:	425b      	neglt	r3, r3
 8003f20:	f042 0202 	orrlt.w	r2, r2, #2
 8003f24:	9307      	strge	r3, [sp, #28]
 8003f26:	9307      	strlt	r3, [sp, #28]
 8003f28:	bfb8      	it	lt
 8003f2a:	9204      	strlt	r2, [sp, #16]
 8003f2c:	7823      	ldrb	r3, [r4, #0]
 8003f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f30:	d10c      	bne.n	8003f4c <_svfiprintf_r+0x130>
 8003f32:	7863      	ldrb	r3, [r4, #1]
 8003f34:	2b2a      	cmp	r3, #42	; 0x2a
 8003f36:	d135      	bne.n	8003fa4 <_svfiprintf_r+0x188>
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	9203      	str	r2, [sp, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bfb8      	it	lt
 8003f44:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f48:	3402      	adds	r4, #2
 8003f4a:	9305      	str	r3, [sp, #20]
 8003f4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004018 <_svfiprintf_r+0x1fc>
 8003f50:	7821      	ldrb	r1, [r4, #0]
 8003f52:	2203      	movs	r2, #3
 8003f54:	4650      	mov	r0, sl
 8003f56:	f7fc f943 	bl	80001e0 <memchr>
 8003f5a:	b140      	cbz	r0, 8003f6e <_svfiprintf_r+0x152>
 8003f5c:	2340      	movs	r3, #64	; 0x40
 8003f5e:	eba0 000a 	sub.w	r0, r0, sl
 8003f62:	fa03 f000 	lsl.w	r0, r3, r0
 8003f66:	9b04      	ldr	r3, [sp, #16]
 8003f68:	4303      	orrs	r3, r0
 8003f6a:	3401      	adds	r4, #1
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f72:	4826      	ldr	r0, [pc, #152]	; (800400c <_svfiprintf_r+0x1f0>)
 8003f74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f78:	2206      	movs	r2, #6
 8003f7a:	f7fc f931 	bl	80001e0 <memchr>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d038      	beq.n	8003ff4 <_svfiprintf_r+0x1d8>
 8003f82:	4b23      	ldr	r3, [pc, #140]	; (8004010 <_svfiprintf_r+0x1f4>)
 8003f84:	bb1b      	cbnz	r3, 8003fce <_svfiprintf_r+0x1b2>
 8003f86:	9b03      	ldr	r3, [sp, #12]
 8003f88:	3307      	adds	r3, #7
 8003f8a:	f023 0307 	bic.w	r3, r3, #7
 8003f8e:	3308      	adds	r3, #8
 8003f90:	9303      	str	r3, [sp, #12]
 8003f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f94:	4433      	add	r3, r6
 8003f96:	9309      	str	r3, [sp, #36]	; 0x24
 8003f98:	e767      	b.n	8003e6a <_svfiprintf_r+0x4e>
 8003f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	e7a5      	b.n	8003ef0 <_svfiprintf_r+0xd4>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	3401      	adds	r4, #1
 8003fa8:	9305      	str	r3, [sp, #20]
 8003faa:	4619      	mov	r1, r3
 8003fac:	f04f 0c0a 	mov.w	ip, #10
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fb6:	3a30      	subs	r2, #48	; 0x30
 8003fb8:	2a09      	cmp	r2, #9
 8003fba:	d903      	bls.n	8003fc4 <_svfiprintf_r+0x1a8>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0c5      	beq.n	8003f4c <_svfiprintf_r+0x130>
 8003fc0:	9105      	str	r1, [sp, #20]
 8003fc2:	e7c3      	b.n	8003f4c <_svfiprintf_r+0x130>
 8003fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fc8:	4604      	mov	r4, r0
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e7f0      	b.n	8003fb0 <_svfiprintf_r+0x194>
 8003fce:	ab03      	add	r3, sp, #12
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <_svfiprintf_r+0x1f8>)
 8003fd6:	a904      	add	r1, sp, #16
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f3af 8000 	nop.w
 8003fde:	1c42      	adds	r2, r0, #1
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	d1d6      	bne.n	8003f92 <_svfiprintf_r+0x176>
 8003fe4:	89ab      	ldrh	r3, [r5, #12]
 8003fe6:	065b      	lsls	r3, r3, #25
 8003fe8:	f53f af2c 	bmi.w	8003e44 <_svfiprintf_r+0x28>
 8003fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fee:	b01d      	add	sp, #116	; 0x74
 8003ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff4:	ab03      	add	r3, sp, #12
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	462a      	mov	r2, r5
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <_svfiprintf_r+0x1f8>)
 8003ffc:	a904      	add	r1, sp, #16
 8003ffe:	4638      	mov	r0, r7
 8004000:	f000 f87a 	bl	80040f8 <_printf_i>
 8004004:	e7eb      	b.n	8003fde <_svfiprintf_r+0x1c2>
 8004006:	bf00      	nop
 8004008:	080046c0 	.word	0x080046c0
 800400c:	080046ca 	.word	0x080046ca
 8004010:	00000000 	.word	0x00000000
 8004014:	08003d65 	.word	0x08003d65
 8004018:	080046c6 	.word	0x080046c6

0800401c <_printf_common>:
 800401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	4616      	mov	r6, r2
 8004022:	4699      	mov	r9, r3
 8004024:	688a      	ldr	r2, [r1, #8]
 8004026:	690b      	ldr	r3, [r1, #16]
 8004028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800402c:	4293      	cmp	r3, r2
 800402e:	bfb8      	it	lt
 8004030:	4613      	movlt	r3, r2
 8004032:	6033      	str	r3, [r6, #0]
 8004034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004038:	4607      	mov	r7, r0
 800403a:	460c      	mov	r4, r1
 800403c:	b10a      	cbz	r2, 8004042 <_printf_common+0x26>
 800403e:	3301      	adds	r3, #1
 8004040:	6033      	str	r3, [r6, #0]
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	0699      	lsls	r1, r3, #26
 8004046:	bf42      	ittt	mi
 8004048:	6833      	ldrmi	r3, [r6, #0]
 800404a:	3302      	addmi	r3, #2
 800404c:	6033      	strmi	r3, [r6, #0]
 800404e:	6825      	ldr	r5, [r4, #0]
 8004050:	f015 0506 	ands.w	r5, r5, #6
 8004054:	d106      	bne.n	8004064 <_printf_common+0x48>
 8004056:	f104 0a19 	add.w	sl, r4, #25
 800405a:	68e3      	ldr	r3, [r4, #12]
 800405c:	6832      	ldr	r2, [r6, #0]
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	42ab      	cmp	r3, r5
 8004062:	dc26      	bgt.n	80040b2 <_printf_common+0x96>
 8004064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004068:	1e13      	subs	r3, r2, #0
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	bf18      	it	ne
 800406e:	2301      	movne	r3, #1
 8004070:	0692      	lsls	r2, r2, #26
 8004072:	d42b      	bmi.n	80040cc <_printf_common+0xb0>
 8004074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004078:	4649      	mov	r1, r9
 800407a:	4638      	mov	r0, r7
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d01e      	beq.n	80040c0 <_printf_common+0xa4>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	68e5      	ldr	r5, [r4, #12]
 8004086:	6832      	ldr	r2, [r6, #0]
 8004088:	f003 0306 	and.w	r3, r3, #6
 800408c:	2b04      	cmp	r3, #4
 800408e:	bf08      	it	eq
 8004090:	1aad      	subeq	r5, r5, r2
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	6922      	ldr	r2, [r4, #16]
 8004096:	bf0c      	ite	eq
 8004098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800409c:	2500      	movne	r5, #0
 800409e:	4293      	cmp	r3, r2
 80040a0:	bfc4      	itt	gt
 80040a2:	1a9b      	subgt	r3, r3, r2
 80040a4:	18ed      	addgt	r5, r5, r3
 80040a6:	2600      	movs	r6, #0
 80040a8:	341a      	adds	r4, #26
 80040aa:	42b5      	cmp	r5, r6
 80040ac:	d11a      	bne.n	80040e4 <_printf_common+0xc8>
 80040ae:	2000      	movs	r0, #0
 80040b0:	e008      	b.n	80040c4 <_printf_common+0xa8>
 80040b2:	2301      	movs	r3, #1
 80040b4:	4652      	mov	r2, sl
 80040b6:	4649      	mov	r1, r9
 80040b8:	4638      	mov	r0, r7
 80040ba:	47c0      	blx	r8
 80040bc:	3001      	adds	r0, #1
 80040be:	d103      	bne.n	80040c8 <_printf_common+0xac>
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c8:	3501      	adds	r5, #1
 80040ca:	e7c6      	b.n	800405a <_printf_common+0x3e>
 80040cc:	18e1      	adds	r1, r4, r3
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	2030      	movs	r0, #48	; 0x30
 80040d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040d6:	4422      	add	r2, r4
 80040d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040e0:	3302      	adds	r3, #2
 80040e2:	e7c7      	b.n	8004074 <_printf_common+0x58>
 80040e4:	2301      	movs	r3, #1
 80040e6:	4622      	mov	r2, r4
 80040e8:	4649      	mov	r1, r9
 80040ea:	4638      	mov	r0, r7
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d0e6      	beq.n	80040c0 <_printf_common+0xa4>
 80040f2:	3601      	adds	r6, #1
 80040f4:	e7d9      	b.n	80040aa <_printf_common+0x8e>
	...

080040f8 <_printf_i>:
 80040f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	460c      	mov	r4, r1
 80040fe:	4691      	mov	r9, r2
 8004100:	7e27      	ldrb	r7, [r4, #24]
 8004102:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004104:	2f78      	cmp	r7, #120	; 0x78
 8004106:	4680      	mov	r8, r0
 8004108:	469a      	mov	sl, r3
 800410a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800410e:	d807      	bhi.n	8004120 <_printf_i+0x28>
 8004110:	2f62      	cmp	r7, #98	; 0x62
 8004112:	d80a      	bhi.n	800412a <_printf_i+0x32>
 8004114:	2f00      	cmp	r7, #0
 8004116:	f000 80d8 	beq.w	80042ca <_printf_i+0x1d2>
 800411a:	2f58      	cmp	r7, #88	; 0x58
 800411c:	f000 80a3 	beq.w	8004266 <_printf_i+0x16e>
 8004120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004128:	e03a      	b.n	80041a0 <_printf_i+0xa8>
 800412a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800412e:	2b15      	cmp	r3, #21
 8004130:	d8f6      	bhi.n	8004120 <_printf_i+0x28>
 8004132:	a001      	add	r0, pc, #4	; (adr r0, 8004138 <_printf_i+0x40>)
 8004134:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004138:	08004191 	.word	0x08004191
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004121 	.word	0x08004121
 8004144:	08004121 	.word	0x08004121
 8004148:	08004121 	.word	0x08004121
 800414c:	08004121 	.word	0x08004121
 8004150:	080041a5 	.word	0x080041a5
 8004154:	08004121 	.word	0x08004121
 8004158:	08004121 	.word	0x08004121
 800415c:	08004121 	.word	0x08004121
 8004160:	08004121 	.word	0x08004121
 8004164:	080042b1 	.word	0x080042b1
 8004168:	080041d5 	.word	0x080041d5
 800416c:	08004293 	.word	0x08004293
 8004170:	08004121 	.word	0x08004121
 8004174:	08004121 	.word	0x08004121
 8004178:	080042d3 	.word	0x080042d3
 800417c:	08004121 	.word	0x08004121
 8004180:	080041d5 	.word	0x080041d5
 8004184:	08004121 	.word	0x08004121
 8004188:	08004121 	.word	0x08004121
 800418c:	0800429b 	.word	0x0800429b
 8004190:	680b      	ldr	r3, [r1, #0]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	600a      	str	r2, [r1, #0]
 8004198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800419c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0a3      	b.n	80042ec <_printf_i+0x1f4>
 80041a4:	6825      	ldr	r5, [r4, #0]
 80041a6:	6808      	ldr	r0, [r1, #0]
 80041a8:	062e      	lsls	r6, r5, #24
 80041aa:	f100 0304 	add.w	r3, r0, #4
 80041ae:	d50a      	bpl.n	80041c6 <_printf_i+0xce>
 80041b0:	6805      	ldr	r5, [r0, #0]
 80041b2:	600b      	str	r3, [r1, #0]
 80041b4:	2d00      	cmp	r5, #0
 80041b6:	da03      	bge.n	80041c0 <_printf_i+0xc8>
 80041b8:	232d      	movs	r3, #45	; 0x2d
 80041ba:	426d      	negs	r5, r5
 80041bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c0:	485e      	ldr	r0, [pc, #376]	; (800433c <_printf_i+0x244>)
 80041c2:	230a      	movs	r3, #10
 80041c4:	e019      	b.n	80041fa <_printf_i+0x102>
 80041c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041ca:	6805      	ldr	r5, [r0, #0]
 80041cc:	600b      	str	r3, [r1, #0]
 80041ce:	bf18      	it	ne
 80041d0:	b22d      	sxthne	r5, r5
 80041d2:	e7ef      	b.n	80041b4 <_printf_i+0xbc>
 80041d4:	680b      	ldr	r3, [r1, #0]
 80041d6:	6825      	ldr	r5, [r4, #0]
 80041d8:	1d18      	adds	r0, r3, #4
 80041da:	6008      	str	r0, [r1, #0]
 80041dc:	0628      	lsls	r0, r5, #24
 80041de:	d501      	bpl.n	80041e4 <_printf_i+0xec>
 80041e0:	681d      	ldr	r5, [r3, #0]
 80041e2:	e002      	b.n	80041ea <_printf_i+0xf2>
 80041e4:	0669      	lsls	r1, r5, #25
 80041e6:	d5fb      	bpl.n	80041e0 <_printf_i+0xe8>
 80041e8:	881d      	ldrh	r5, [r3, #0]
 80041ea:	4854      	ldr	r0, [pc, #336]	; (800433c <_printf_i+0x244>)
 80041ec:	2f6f      	cmp	r7, #111	; 0x6f
 80041ee:	bf0c      	ite	eq
 80041f0:	2308      	moveq	r3, #8
 80041f2:	230a      	movne	r3, #10
 80041f4:	2100      	movs	r1, #0
 80041f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041fa:	6866      	ldr	r6, [r4, #4]
 80041fc:	60a6      	str	r6, [r4, #8]
 80041fe:	2e00      	cmp	r6, #0
 8004200:	bfa2      	ittt	ge
 8004202:	6821      	ldrge	r1, [r4, #0]
 8004204:	f021 0104 	bicge.w	r1, r1, #4
 8004208:	6021      	strge	r1, [r4, #0]
 800420a:	b90d      	cbnz	r5, 8004210 <_printf_i+0x118>
 800420c:	2e00      	cmp	r6, #0
 800420e:	d04d      	beq.n	80042ac <_printf_i+0x1b4>
 8004210:	4616      	mov	r6, r2
 8004212:	fbb5 f1f3 	udiv	r1, r5, r3
 8004216:	fb03 5711 	mls	r7, r3, r1, r5
 800421a:	5dc7      	ldrb	r7, [r0, r7]
 800421c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004220:	462f      	mov	r7, r5
 8004222:	42bb      	cmp	r3, r7
 8004224:	460d      	mov	r5, r1
 8004226:	d9f4      	bls.n	8004212 <_printf_i+0x11a>
 8004228:	2b08      	cmp	r3, #8
 800422a:	d10b      	bne.n	8004244 <_printf_i+0x14c>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	07df      	lsls	r7, r3, #31
 8004230:	d508      	bpl.n	8004244 <_printf_i+0x14c>
 8004232:	6923      	ldr	r3, [r4, #16]
 8004234:	6861      	ldr	r1, [r4, #4]
 8004236:	4299      	cmp	r1, r3
 8004238:	bfde      	ittt	le
 800423a:	2330      	movle	r3, #48	; 0x30
 800423c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004240:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004244:	1b92      	subs	r2, r2, r6
 8004246:	6122      	str	r2, [r4, #16]
 8004248:	f8cd a000 	str.w	sl, [sp]
 800424c:	464b      	mov	r3, r9
 800424e:	aa03      	add	r2, sp, #12
 8004250:	4621      	mov	r1, r4
 8004252:	4640      	mov	r0, r8
 8004254:	f7ff fee2 	bl	800401c <_printf_common>
 8004258:	3001      	adds	r0, #1
 800425a:	d14c      	bne.n	80042f6 <_printf_i+0x1fe>
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	b004      	add	sp, #16
 8004262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004266:	4835      	ldr	r0, [pc, #212]	; (800433c <_printf_i+0x244>)
 8004268:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	680e      	ldr	r6, [r1, #0]
 8004270:	061f      	lsls	r7, r3, #24
 8004272:	f856 5b04 	ldr.w	r5, [r6], #4
 8004276:	600e      	str	r6, [r1, #0]
 8004278:	d514      	bpl.n	80042a4 <_printf_i+0x1ac>
 800427a:	07d9      	lsls	r1, r3, #31
 800427c:	bf44      	itt	mi
 800427e:	f043 0320 	orrmi.w	r3, r3, #32
 8004282:	6023      	strmi	r3, [r4, #0]
 8004284:	b91d      	cbnz	r5, 800428e <_printf_i+0x196>
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	f023 0320 	bic.w	r3, r3, #32
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	2310      	movs	r3, #16
 8004290:	e7b0      	b.n	80041f4 <_printf_i+0xfc>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	f043 0320 	orr.w	r3, r3, #32
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	2378      	movs	r3, #120	; 0x78
 800429c:	4828      	ldr	r0, [pc, #160]	; (8004340 <_printf_i+0x248>)
 800429e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042a2:	e7e3      	b.n	800426c <_printf_i+0x174>
 80042a4:	065e      	lsls	r6, r3, #25
 80042a6:	bf48      	it	mi
 80042a8:	b2ad      	uxthmi	r5, r5
 80042aa:	e7e6      	b.n	800427a <_printf_i+0x182>
 80042ac:	4616      	mov	r6, r2
 80042ae:	e7bb      	b.n	8004228 <_printf_i+0x130>
 80042b0:	680b      	ldr	r3, [r1, #0]
 80042b2:	6826      	ldr	r6, [r4, #0]
 80042b4:	6960      	ldr	r0, [r4, #20]
 80042b6:	1d1d      	adds	r5, r3, #4
 80042b8:	600d      	str	r5, [r1, #0]
 80042ba:	0635      	lsls	r5, r6, #24
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	d501      	bpl.n	80042c4 <_printf_i+0x1cc>
 80042c0:	6018      	str	r0, [r3, #0]
 80042c2:	e002      	b.n	80042ca <_printf_i+0x1d2>
 80042c4:	0671      	lsls	r1, r6, #25
 80042c6:	d5fb      	bpl.n	80042c0 <_printf_i+0x1c8>
 80042c8:	8018      	strh	r0, [r3, #0]
 80042ca:	2300      	movs	r3, #0
 80042cc:	6123      	str	r3, [r4, #16]
 80042ce:	4616      	mov	r6, r2
 80042d0:	e7ba      	b.n	8004248 <_printf_i+0x150>
 80042d2:	680b      	ldr	r3, [r1, #0]
 80042d4:	1d1a      	adds	r2, r3, #4
 80042d6:	600a      	str	r2, [r1, #0]
 80042d8:	681e      	ldr	r6, [r3, #0]
 80042da:	6862      	ldr	r2, [r4, #4]
 80042dc:	2100      	movs	r1, #0
 80042de:	4630      	mov	r0, r6
 80042e0:	f7fb ff7e 	bl	80001e0 <memchr>
 80042e4:	b108      	cbz	r0, 80042ea <_printf_i+0x1f2>
 80042e6:	1b80      	subs	r0, r0, r6
 80042e8:	6060      	str	r0, [r4, #4]
 80042ea:	6863      	ldr	r3, [r4, #4]
 80042ec:	6123      	str	r3, [r4, #16]
 80042ee:	2300      	movs	r3, #0
 80042f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f4:	e7a8      	b.n	8004248 <_printf_i+0x150>
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	4632      	mov	r2, r6
 80042fa:	4649      	mov	r1, r9
 80042fc:	4640      	mov	r0, r8
 80042fe:	47d0      	blx	sl
 8004300:	3001      	adds	r0, #1
 8004302:	d0ab      	beq.n	800425c <_printf_i+0x164>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	079b      	lsls	r3, r3, #30
 8004308:	d413      	bmi.n	8004332 <_printf_i+0x23a>
 800430a:	68e0      	ldr	r0, [r4, #12]
 800430c:	9b03      	ldr	r3, [sp, #12]
 800430e:	4298      	cmp	r0, r3
 8004310:	bfb8      	it	lt
 8004312:	4618      	movlt	r0, r3
 8004314:	e7a4      	b.n	8004260 <_printf_i+0x168>
 8004316:	2301      	movs	r3, #1
 8004318:	4632      	mov	r2, r6
 800431a:	4649      	mov	r1, r9
 800431c:	4640      	mov	r0, r8
 800431e:	47d0      	blx	sl
 8004320:	3001      	adds	r0, #1
 8004322:	d09b      	beq.n	800425c <_printf_i+0x164>
 8004324:	3501      	adds	r5, #1
 8004326:	68e3      	ldr	r3, [r4, #12]
 8004328:	9903      	ldr	r1, [sp, #12]
 800432a:	1a5b      	subs	r3, r3, r1
 800432c:	42ab      	cmp	r3, r5
 800432e:	dcf2      	bgt.n	8004316 <_printf_i+0x21e>
 8004330:	e7eb      	b.n	800430a <_printf_i+0x212>
 8004332:	2500      	movs	r5, #0
 8004334:	f104 0619 	add.w	r6, r4, #25
 8004338:	e7f5      	b.n	8004326 <_printf_i+0x22e>
 800433a:	bf00      	nop
 800433c:	080046d1 	.word	0x080046d1
 8004340:	080046e2 	.word	0x080046e2

08004344 <memmove>:
 8004344:	4288      	cmp	r0, r1
 8004346:	b510      	push	{r4, lr}
 8004348:	eb01 0402 	add.w	r4, r1, r2
 800434c:	d902      	bls.n	8004354 <memmove+0x10>
 800434e:	4284      	cmp	r4, r0
 8004350:	4623      	mov	r3, r4
 8004352:	d807      	bhi.n	8004364 <memmove+0x20>
 8004354:	1e43      	subs	r3, r0, #1
 8004356:	42a1      	cmp	r1, r4
 8004358:	d008      	beq.n	800436c <memmove+0x28>
 800435a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800435e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004362:	e7f8      	b.n	8004356 <memmove+0x12>
 8004364:	4402      	add	r2, r0
 8004366:	4601      	mov	r1, r0
 8004368:	428a      	cmp	r2, r1
 800436a:	d100      	bne.n	800436e <memmove+0x2a>
 800436c:	bd10      	pop	{r4, pc}
 800436e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004376:	e7f7      	b.n	8004368 <memmove+0x24>

08004378 <_free_r>:
 8004378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800437a:	2900      	cmp	r1, #0
 800437c:	d048      	beq.n	8004410 <_free_r+0x98>
 800437e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004382:	9001      	str	r0, [sp, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f1a1 0404 	sub.w	r4, r1, #4
 800438a:	bfb8      	it	lt
 800438c:	18e4      	addlt	r4, r4, r3
 800438e:	f000 f8d3 	bl	8004538 <__malloc_lock>
 8004392:	4a20      	ldr	r2, [pc, #128]	; (8004414 <_free_r+0x9c>)
 8004394:	9801      	ldr	r0, [sp, #4]
 8004396:	6813      	ldr	r3, [r2, #0]
 8004398:	4615      	mov	r5, r2
 800439a:	b933      	cbnz	r3, 80043aa <_free_r+0x32>
 800439c:	6063      	str	r3, [r4, #4]
 800439e:	6014      	str	r4, [r2, #0]
 80043a0:	b003      	add	sp, #12
 80043a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043a6:	f000 b8cd 	b.w	8004544 <__malloc_unlock>
 80043aa:	42a3      	cmp	r3, r4
 80043ac:	d90b      	bls.n	80043c6 <_free_r+0x4e>
 80043ae:	6821      	ldr	r1, [r4, #0]
 80043b0:	1862      	adds	r2, r4, r1
 80043b2:	4293      	cmp	r3, r2
 80043b4:	bf04      	itt	eq
 80043b6:	681a      	ldreq	r2, [r3, #0]
 80043b8:	685b      	ldreq	r3, [r3, #4]
 80043ba:	6063      	str	r3, [r4, #4]
 80043bc:	bf04      	itt	eq
 80043be:	1852      	addeq	r2, r2, r1
 80043c0:	6022      	streq	r2, [r4, #0]
 80043c2:	602c      	str	r4, [r5, #0]
 80043c4:	e7ec      	b.n	80043a0 <_free_r+0x28>
 80043c6:	461a      	mov	r2, r3
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	b10b      	cbz	r3, 80043d0 <_free_r+0x58>
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	d9fa      	bls.n	80043c6 <_free_r+0x4e>
 80043d0:	6811      	ldr	r1, [r2, #0]
 80043d2:	1855      	adds	r5, r2, r1
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d10b      	bne.n	80043f0 <_free_r+0x78>
 80043d8:	6824      	ldr	r4, [r4, #0]
 80043da:	4421      	add	r1, r4
 80043dc:	1854      	adds	r4, r2, r1
 80043de:	42a3      	cmp	r3, r4
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	d1dd      	bne.n	80043a0 <_free_r+0x28>
 80043e4:	681c      	ldr	r4, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	6053      	str	r3, [r2, #4]
 80043ea:	4421      	add	r1, r4
 80043ec:	6011      	str	r1, [r2, #0]
 80043ee:	e7d7      	b.n	80043a0 <_free_r+0x28>
 80043f0:	d902      	bls.n	80043f8 <_free_r+0x80>
 80043f2:	230c      	movs	r3, #12
 80043f4:	6003      	str	r3, [r0, #0]
 80043f6:	e7d3      	b.n	80043a0 <_free_r+0x28>
 80043f8:	6825      	ldr	r5, [r4, #0]
 80043fa:	1961      	adds	r1, r4, r5
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf04      	itt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	6063      	str	r3, [r4, #4]
 8004406:	bf04      	itt	eq
 8004408:	1949      	addeq	r1, r1, r5
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	6054      	str	r4, [r2, #4]
 800440e:	e7c7      	b.n	80043a0 <_free_r+0x28>
 8004410:	b003      	add	sp, #12
 8004412:	bd30      	pop	{r4, r5, pc}
 8004414:	200015b8 	.word	0x200015b8

08004418 <_malloc_r>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	1ccd      	adds	r5, r1, #3
 800441c:	f025 0503 	bic.w	r5, r5, #3
 8004420:	3508      	adds	r5, #8
 8004422:	2d0c      	cmp	r5, #12
 8004424:	bf38      	it	cc
 8004426:	250c      	movcc	r5, #12
 8004428:	2d00      	cmp	r5, #0
 800442a:	4606      	mov	r6, r0
 800442c:	db01      	blt.n	8004432 <_malloc_r+0x1a>
 800442e:	42a9      	cmp	r1, r5
 8004430:	d903      	bls.n	800443a <_malloc_r+0x22>
 8004432:	230c      	movs	r3, #12
 8004434:	6033      	str	r3, [r6, #0]
 8004436:	2000      	movs	r0, #0
 8004438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800443a:	f000 f87d 	bl	8004538 <__malloc_lock>
 800443e:	4921      	ldr	r1, [pc, #132]	; (80044c4 <_malloc_r+0xac>)
 8004440:	680a      	ldr	r2, [r1, #0]
 8004442:	4614      	mov	r4, r2
 8004444:	b99c      	cbnz	r4, 800446e <_malloc_r+0x56>
 8004446:	4f20      	ldr	r7, [pc, #128]	; (80044c8 <_malloc_r+0xb0>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	b923      	cbnz	r3, 8004456 <_malloc_r+0x3e>
 800444c:	4621      	mov	r1, r4
 800444e:	4630      	mov	r0, r6
 8004450:	f000 f862 	bl	8004518 <_sbrk_r>
 8004454:	6038      	str	r0, [r7, #0]
 8004456:	4629      	mov	r1, r5
 8004458:	4630      	mov	r0, r6
 800445a:	f000 f85d 	bl	8004518 <_sbrk_r>
 800445e:	1c43      	adds	r3, r0, #1
 8004460:	d123      	bne.n	80044aa <_malloc_r+0x92>
 8004462:	230c      	movs	r3, #12
 8004464:	6033      	str	r3, [r6, #0]
 8004466:	4630      	mov	r0, r6
 8004468:	f000 f86c 	bl	8004544 <__malloc_unlock>
 800446c:	e7e3      	b.n	8004436 <_malloc_r+0x1e>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	1b5b      	subs	r3, r3, r5
 8004472:	d417      	bmi.n	80044a4 <_malloc_r+0x8c>
 8004474:	2b0b      	cmp	r3, #11
 8004476:	d903      	bls.n	8004480 <_malloc_r+0x68>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	441c      	add	r4, r3
 800447c:	6025      	str	r5, [r4, #0]
 800447e:	e004      	b.n	800448a <_malloc_r+0x72>
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	42a2      	cmp	r2, r4
 8004484:	bf0c      	ite	eq
 8004486:	600b      	streq	r3, [r1, #0]
 8004488:	6053      	strne	r3, [r2, #4]
 800448a:	4630      	mov	r0, r6
 800448c:	f000 f85a 	bl	8004544 <__malloc_unlock>
 8004490:	f104 000b 	add.w	r0, r4, #11
 8004494:	1d23      	adds	r3, r4, #4
 8004496:	f020 0007 	bic.w	r0, r0, #7
 800449a:	1ac2      	subs	r2, r0, r3
 800449c:	d0cc      	beq.n	8004438 <_malloc_r+0x20>
 800449e:	1a1b      	subs	r3, r3, r0
 80044a0:	50a3      	str	r3, [r4, r2]
 80044a2:	e7c9      	b.n	8004438 <_malloc_r+0x20>
 80044a4:	4622      	mov	r2, r4
 80044a6:	6864      	ldr	r4, [r4, #4]
 80044a8:	e7cc      	b.n	8004444 <_malloc_r+0x2c>
 80044aa:	1cc4      	adds	r4, r0, #3
 80044ac:	f024 0403 	bic.w	r4, r4, #3
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d0e3      	beq.n	800447c <_malloc_r+0x64>
 80044b4:	1a21      	subs	r1, r4, r0
 80044b6:	4630      	mov	r0, r6
 80044b8:	f000 f82e 	bl	8004518 <_sbrk_r>
 80044bc:	3001      	adds	r0, #1
 80044be:	d1dd      	bne.n	800447c <_malloc_r+0x64>
 80044c0:	e7cf      	b.n	8004462 <_malloc_r+0x4a>
 80044c2:	bf00      	nop
 80044c4:	200015b8 	.word	0x200015b8
 80044c8:	200015bc 	.word	0x200015bc

080044cc <_realloc_r>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	4607      	mov	r7, r0
 80044d0:	4614      	mov	r4, r2
 80044d2:	460e      	mov	r6, r1
 80044d4:	b921      	cbnz	r1, 80044e0 <_realloc_r+0x14>
 80044d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044da:	4611      	mov	r1, r2
 80044dc:	f7ff bf9c 	b.w	8004418 <_malloc_r>
 80044e0:	b922      	cbnz	r2, 80044ec <_realloc_r+0x20>
 80044e2:	f7ff ff49 	bl	8004378 <_free_r>
 80044e6:	4625      	mov	r5, r4
 80044e8:	4628      	mov	r0, r5
 80044ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ec:	f000 f830 	bl	8004550 <_malloc_usable_size_r>
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d20f      	bcs.n	8004514 <_realloc_r+0x48>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4638      	mov	r0, r7
 80044f8:	f7ff ff8e 	bl	8004418 <_malloc_r>
 80044fc:	4605      	mov	r5, r0
 80044fe:	2800      	cmp	r0, #0
 8004500:	d0f2      	beq.n	80044e8 <_realloc_r+0x1c>
 8004502:	4631      	mov	r1, r6
 8004504:	4622      	mov	r2, r4
 8004506:	f7ff fbef 	bl	8003ce8 <memcpy>
 800450a:	4631      	mov	r1, r6
 800450c:	4638      	mov	r0, r7
 800450e:	f7ff ff33 	bl	8004378 <_free_r>
 8004512:	e7e9      	b.n	80044e8 <_realloc_r+0x1c>
 8004514:	4635      	mov	r5, r6
 8004516:	e7e7      	b.n	80044e8 <_realloc_r+0x1c>

08004518 <_sbrk_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4d06      	ldr	r5, [pc, #24]	; (8004534 <_sbrk_r+0x1c>)
 800451c:	2300      	movs	r3, #0
 800451e:	4604      	mov	r4, r0
 8004520:	4608      	mov	r0, r1
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	f7fc fbc6 	bl	8000cb4 <_sbrk>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_sbrk_r+0x1a>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_sbrk_r+0x1a>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20001650 	.word	0x20001650

08004538 <__malloc_lock>:
 8004538:	4801      	ldr	r0, [pc, #4]	; (8004540 <__malloc_lock+0x8>)
 800453a:	f000 b811 	b.w	8004560 <__retarget_lock_acquire_recursive>
 800453e:	bf00      	nop
 8004540:	20001658 	.word	0x20001658

08004544 <__malloc_unlock>:
 8004544:	4801      	ldr	r0, [pc, #4]	; (800454c <__malloc_unlock+0x8>)
 8004546:	f000 b80c 	b.w	8004562 <__retarget_lock_release_recursive>
 800454a:	bf00      	nop
 800454c:	20001658 	.word	0x20001658

08004550 <_malloc_usable_size_r>:
 8004550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004554:	1f18      	subs	r0, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	bfbc      	itt	lt
 800455a:	580b      	ldrlt	r3, [r1, r0]
 800455c:	18c0      	addlt	r0, r0, r3
 800455e:	4770      	bx	lr

08004560 <__retarget_lock_acquire_recursive>:
 8004560:	4770      	bx	lr

08004562 <__retarget_lock_release_recursive>:
 8004562:	4770      	bx	lr

08004564 <_init>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr

08004570 <_fini>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr
